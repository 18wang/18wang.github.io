<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AutoHotKey入门</title>
      <link href="/2020/09/15/AutoHotKey%E5%85%A5%E9%97%A8/"/>
      <url>/2020/09/15/AutoHotKey%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="AutoHotKey-使用"><a class="header-anchor" href="#AutoHotKey-使用"></a>AutoHotKey 使用</h1><p>在整理电子书的时候, 看到从一些网站下载的电子书中含有水印, 文字插入等难以通过PDF编辑器批量选中删除的内容, 于是考虑采用脚本, 批量操作的方法实现这一目标.</p><p><code>AutoHotKey</code>就是这样一款卓越的脚本语言. 虽然充分理解和运用这一工具需要很多时间和精力, 但是在处理简单任务的时候, AHK上手也十分容易.</p><p>安装完AHK之后, 打开 Help 可以看到全部的帮助文件.</p><h2 id="1-目标–删除位于文档固定位置的字符"><a class="header-anchor" href="#1-目标–删除位于文档固定位置的字符"></a>1. 目标–删除位于文档固定位置的字符</h2> <img src="https://cdn.jsdelivr.net/gh/18wang/media/AutoHotKey入门/1.jpg" style="transform:rotate(0deg);" width =600>         <ul><li>需要删除的文本位于文档的固定位置</li></ul><img src="https://cdn.jsdelivr.net/gh/18wang/media/AutoHotKey入门/2.jpg" style="transform:rotate(0deg);" width =600><ul><li>可以通过<code>调整到编辑模式</code>, <code>右键文本</code>, <code>Delete键*</code>, <code>去往下一页相同位置</code> 的循环进行手动删除.</li></ul><img src="https://cdn.jsdelivr.net/gh/18wang/media/AutoHotKey入门/4.jpg" style="transform:rotate(0deg);" width =600><blockquote><p>* 非常值得注意的一点是, 当该页不存在文本或者文本已经被删除时, Delete键不起作用, 页面卡住, 须按 <code>Esc</code> 键退出.<br><img src="https://cdn.jsdelivr.net/gh/18wang/media/AutoHotKey入门/3.jpg" style="transform:rotate(0deg);" width =600></p></blockquote><h2 id="2-方案–AHK循环操作"><a class="header-anchor" href="#2-方案–AHK循环操作"></a>2. 方案–AHK循环操作</h2><h3 id="1-触发"><a class="header-anchor" href="#1-触发"></a>1. 触发</h3><ul><li><p>运行 AHK 脚本, 任务栏出现 H 图标, 等待执行</p></li><li><p>AHK 包含了一系列的 <code>热键(HotKey)</code>, 热键位于 <code>::</code> 的左侧, 在进行热键点击后, 会触发下面的语句</p><figure class="highlight ahk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">^j::</span></span><br><span class="line"><span class="built_in">Send,</span> My First Script  <span class="comment">; sth</span></span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure><blockquote><p><code>1. ^j</code>表示点击<code>Control+j</code>, <code>Send</code> 可以发送文本和各种命令, <code>;</code> 右侧是不被执行的注释, 可以是中文<br>2. AHK 中, 命令和命令或参数之间, 用 “,” &quot; &quot; 分隔, 空格和逗号可以一起使用</p></blockquote></li><li><p>当然一个脚本也可以没有热键/热字串, 直接执行命令, 但那往往会难以控制, 比较糟糕</p></li></ul><h3 id="2-循环"><a class="header-anchor" href="#2-循环"></a>2. 循环</h3><ul><li>AHK 提供了循环命令, 一个命令有多个参数时, 用 <code>{}</code> 把它们括起来<figure class="highlight ahk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Loop %</span>RepeatCount% &#123;    <span class="comment">; 重复次数</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Loop,</span> <span class="number">3</span>       <span class="comment">; 一个例子</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">  MsgBox,</span> Iteration number is <span class="variable">%A_Index%</span>.  <span class="comment">; A_Index will be 1, 2, then 3</span></span><br><span class="line"><span class="built_in">  Sleep,</span> <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-退出"><a class="header-anchor" href="#3-退出"></a>3. 退出</h3><ul><li>AHK 中可以随处添加 <code>return</code>, 帮助你修改错误和规避运行风险</li></ul><h2 id="3-程序-ahk"><a class="header-anchor" href="#3-程序-ahk"></a>3. 程序-- **.ahk</h2><figure class="highlight ahk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">+s::</span>            <span class="comment">; PDF 编辑模式, 单页显示模式</span></span><br><span class="line"><span class="built_in">Loop,</span> <span class="number">1</span>         <span class="comment">; 循环次数 = 页数</span></span><br><span class="line">&#123;</span><br><span class="line">    Send &#123;Click, right&#125;     <span class="comment">; 右击</span></span><br><span class="line">    Send &#123;Delete&#125;           <span class="comment">; 删除</span></span><br><span class="line">    Send &#123;Esc&#125;              <span class="comment">; 退出(如需要)</span></span><br><span class="line">    Send &#123;Down&#125;             <span class="comment">; 下一页</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法图解</title>
      <link href="/2020/09/14/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/"/>
      <url>/2020/09/14/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="算法图解"><a class="header-anchor" href="#算法图解"></a>算法图解</h1><p>最近在学习工作中发现算法的重要性, 以及自己这方面知识的匮乏. 我虽然不是科班出身, 也不打算进行完全深入的研究, 但仍然决定了解一些相关知识, 最好能有所运用. 毫无疑问, 算法只是一类方法的统称, 就像编程这个叫法一样.</p><p>相关资料存放在<a href="https://cdn.jsdelivr.net/gh/18wang/media/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3/" target="_blank" rel="noopener">这里</a></p><h2 id="1-算法简介"><a class="header-anchor" href="#1-算法简介"></a>1. 算法简介</h2><h3 id="1-1-二分查找"><a class="header-anchor" href="#1-1-二分查找"></a>1.1 二分查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(L, item)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    二分查找</span></span><br><span class="line"><span class="string">    L 升序排列的list</span></span><br><span class="line"><span class="string">    item 需要查找的元素</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(L) - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> L[mid] &gt; item:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> L[mid] &lt; item:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">List = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">23</span>]</span><br><span class="line">print(binary_search(List, <span class="number">8</span>))</span><br></pre></td></tr></table></figure><pre><code>2</code></pre><h3 id="1-2-算法的-O-表示法"><a class="header-anchor" href="#1-2-算法的-O-表示法"></a>1.2 算法的 O 表示法</h3><p>$O(logn)$<br>$ O(n) $<br>$ O(n*logn) $<br>$O(n^2)$<br>$O(n!)$</p><h2 id="2-选择排序"><a class="header-anchor" href="#2-选择排序"></a>2. 选择排序</h2><p>数组和链表优劣得所</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findSmallest</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    查找最小的元素, 返回第一次出现的下标</span></span><br><span class="line"><span class="string">    L 数组</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    smallest = L[<span class="number">0</span>]</span><br><span class="line">    smallestIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(L)):</span><br><span class="line">        <span class="keyword">if</span> L[i] &lt; smallest:</span><br><span class="line">            smallestIndex = i</span><br><span class="line">            smallest = L[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> smallestIndex </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionSort</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    选择排序, 升序排列</span></span><br><span class="line"><span class="string">    L 数组</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    newL = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(L)):</span><br><span class="line">        smallest = findSmallest(L)</span><br><span class="line">        newL.append(L[smallest])</span><br><span class="line">        L.pop(smallest)     <span class="comment"># del L[smallest]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> newL</span><br><span class="line"></span><br><span class="line">print(selectionSort([<span class="number">33</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">58</span>]))</span><br></pre></td></tr></table></figure><pre><code>[-1, 2, 5, 33, 58]</code></pre><h2 id="3-递归"><a class="header-anchor" href="#3-递归"></a>3. 递归</h2><p>如果使用循环，程序的性能可能更高；如果使用递归，程序可能更容易理解。如何选择要看什么对你来说更重要。</p><h3 id="3-1-基线条件和递归条件"><a class="header-anchor" href="#3-1-基线条件和递归条件"></a>3.1 基线条件和递归条件</h3><p>基线条件: 什么时候终止<br>递归条件: 什么时候递归</p><p>调用栈可能花费很多内存, 有必要采用尾递归的方法加以改进. 不过python对尾递归非常不支持.</p><h2 id="4-快速排序"><a class="header-anchor" href="#4-快速排序"></a>4. 快速排序</h2><h3 id="4-1-分而治之-divide-and-conquer"><a class="header-anchor" href="#4-1-分而治之-divide-and-conquer"></a>4.1 分而治之 divide and conquer</h3><p>每次都将问题转化成为一个最容易解决的问题和一个复杂的问题, 再对复杂问题进行拆解, 直到所有问题都非常容易解决.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumList</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    用分而治之的递归思想 求数组元素的和</span></span><br><span class="line"><span class="string">    L 数组</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> L == []:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> L[<span class="number">0</span>] + sumList(L[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line">print(sumList([<span class="number">2</span>, <span class="number">20</span>, <span class="number">-12</span>]))</span><br></pre></td></tr></table></figure><pre><code>10</code></pre><h3 id="4-2-快速排序"><a class="header-anchor" href="#4-2-快速排序"></a>4.2 快速排序</h3><p>基本思路:</p><ol><li>选择基准值。</li><li>将数组分成两个子数组：小于基准值的元素和大于基准值的元素。</li><li>对这两个子数组进行快速排序。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    快速排序 </span></span><br><span class="line"><span class="string">    L 数组</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">if</span> len(L) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> L</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = L[<span class="number">0</span>]</span><br><span class="line">        smaller, bigger = [], []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> L[<span class="number">1</span>:]:</span><br><span class="line">            <span class="keyword">if</span> i &lt; pivot:</span><br><span class="line">                smaller.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                bigger.append(i)</span><br><span class="line">    <span class="keyword">return</span> quickSort(smaller) + [pivot] + quickSort(bigger)</span><br><span class="line"></span><br><span class="line">print(quickSort([<span class="number">3</span>, <span class="number">56</span>, <span class="number">-2</span>, <span class="number">33</span>, <span class="number">56</span>]))</span><br></pre></td></tr></table></figure><pre><code>[-2, 3, 33, 56, 56]</code></pre><h2 id="5-哈希表-字典"><a class="header-anchor" href="#5-哈希表-字典"></a>5. 哈希表(字典)</h2><p>DNS域名服务器解析, 缓存<br>防止重复等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">voted = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkVoted</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> voted.get(name):</span><br><span class="line">        print(name+<span class="string">' has voted!'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        voted[name] = <span class="literal">True</span></span><br><span class="line">        print(<span class="string">'Let '</span>+name+<span class="string">' vote.'</span>)</span><br><span class="line"></span><br><span class="line">checkVoted(<span class="string">'Cris'</span>)</span><br><span class="line">checkVoted(<span class="string">'Leonard'</span>)</span><br><span class="line">checkVoted(<span class="string">'Cris'</span>)</span><br></pre></td></tr></table></figure><pre><code>Let Cris vote.Let Leonard vote.Cris has voted!</code></pre><p>哈希表和链表共同作用, 在哈希表上连接长度不等的链表, 减少空间, 减少性能的衰减.</p><p><strong>哈希函数很重要, 使得装填因子不会太长, 性能不会下降太多.</strong></p><p>$$装填因子 = \frac{整个表元素个数}{位置总数}$$<br>一般 $装填因子&lt;0.7$, 否则就要扩充位置总数, 重新设计哈希函数</p><h2 id="6-广度优先搜索"><a class="header-anchor" href="#6-广度优先搜索"></a>6. 广度优先搜索</h2><p>用于解决最短路径问题, 通常用图建立问题模型.</p><p><strong>队列先进先出, 栈后进先出</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">person_is_seller</span><span class="params">(name)</span>:</span> </span><br><span class="line">    <span class="keyword">return</span> name[<span class="number">-1</span>] == <span class="string">'m'</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(graph, name)</span>:</span> </span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    寻找图中的芒果销售商</span></span><br><span class="line"><span class="string">    graph 朋友关系网</span></span><br><span class="line"><span class="string">    name 起始姓名</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    search_queue = deque() </span><br><span class="line">    search_queue += graph[name] </span><br><span class="line">    searched = [] </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> search_queue: </span><br><span class="line">        person = search_queue.popleft() </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> person <span class="keyword">in</span> searched:</span><br><span class="line">            <span class="keyword">if</span> person_is_seller(person): </span><br><span class="line">                print(person + <span class="string">" is a mango seller!"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                search_queue += graph[person] </span><br><span class="line">                searched.append(person)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line"></span><br><span class="line">graph = &#123;&#125; </span><br><span class="line">graph[<span class="string">"you"</span>] = [<span class="string">"alice"</span>, <span class="string">"bob"</span>, <span class="string">"claire"</span>] </span><br><span class="line">graph[<span class="string">"bob"</span>] = [<span class="string">"anuj"</span>, <span class="string">"peggy"</span>] </span><br><span class="line">graph[<span class="string">"alice"</span>] = [<span class="string">"peggy"</span>] </span><br><span class="line">graph[<span class="string">"claire"</span>] = [<span class="string">"thom"</span>, <span class="string">"jonny"</span>] </span><br><span class="line">graph[<span class="string">"anuj"</span>] = [] </span><br><span class="line">graph[<span class="string">"peggy"</span>] = [] </span><br><span class="line">graph[<span class="string">"thom"</span>] = [] </span><br><span class="line">graph[<span class="string">"jonny"</span>] = [] </span><br><span class="line"></span><br><span class="line">search(graph, <span class="string">"you"</span>)</span><br></pre></td></tr></table></figure><pre><code>thom is a mango seller!True</code></pre><h2 id="7-迪杰斯特拉算法-Dijkstra’s-algorithm"><a class="header-anchor" href="#7-迪杰斯特拉算法-Dijkstra’s-algorithm"></a>7. 迪杰斯特拉算法 Dijkstra’s algorithm</h2><p>计算加权图(weighted graph), 寻早用时最短路径, 只适用于<u>有向正权无环图</u></p><p><u><strong>方法:</strong> </u></p><ol><li>找出最便宜的节点，即可在最短时间内前往的节点。</li><li>对于该节点的邻居，检查是否有前往它们的更短路径，如果有，就更新其开销。</li><li>重复这个过程，直到对图中的每个节点都这样做了。</li><li>计算最终路径。</li></ol><blockquote><p>对于存在负边权的图, 可以用贝尔曼-福德算法</p></blockquote><p>使用<code>嵌套字典</code>和<code>迪杰斯特拉算法</code>, 实现对最短路径的求解</p><img src="https://cdn.jsdelivr.net/gh/18wang/media/算法图解/1.jpg" style="transform:rotate(0deg);" width =600><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 寻找开销最小的节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_lowest_cost_node</span><span class="params">(costs)</span>:</span> </span><br><span class="line">    lowest_cost = float(<span class="string">"inf"</span>) </span><br><span class="line">    lowest_cost_node = <span class="literal">None</span> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> costs:</span><br><span class="line">        cost = costs[node] </span><br><span class="line">        <span class="keyword">if</span> cost &lt; lowest_cost <span class="keyword">and</span> node <span class="keyword">not</span> <span class="keyword">in</span> processed:</span><br><span class="line">            lowest_cost = cost</span><br><span class="line">            lowest_cost_node = node </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> lowest_cost_node </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建整个图</span></span><br><span class="line">graph = &#123;&#125;</span><br><span class="line">graph[<span class="string">'start'</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">'start'</span>][<span class="string">'a'</span>] = <span class="number">6</span></span><br><span class="line">graph[<span class="string">'start'</span>][<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line">graph[<span class="string">'a'</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">'a'</span>][<span class="string">'fin'</span>] = <span class="number">1</span></span><br><span class="line">graph[<span class="string">'b'</span>] = &#123;&#125;</span><br><span class="line">graph[<span class="string">'b'</span>][<span class="string">'a'</span>] = <span class="number">3</span></span><br><span class="line">graph[<span class="string">'b'</span>][<span class="string">'fin'</span>] = <span class="number">5</span></span><br><span class="line">graph[<span class="string">'fin'</span>] = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储到每个点的开销 </span></span><br><span class="line">infinity = float(<span class="string">'inf'</span>)</span><br><span class="line">costs = &#123;&#125;</span><br><span class="line">costs[<span class="string">'a'</span>] = <span class="number">6</span></span><br><span class="line">costs[<span class="string">'b'</span>] = <span class="number">2</span></span><br><span class="line">costs[<span class="string">'fin'</span>] = infinity     <span class="comment"># 不知到终点距离, 设为无穷</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储上一步的父节点</span></span><br><span class="line">parents = &#123;&#125;</span><br><span class="line">parents[<span class="string">'a'</span>] = <span class="string">'start'</span></span><br><span class="line">parents[<span class="string">'b'</span>] = <span class="string">'start'</span></span><br><span class="line">parents[<span class="string">'fin'</span>] = <span class="literal">None</span>   <span class="comment"># 未知设为 None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录已经处理过的节点</span></span><br><span class="line">processed = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始寻找</span></span><br><span class="line">node = find_lowest_cost_node(costs)</span><br><span class="line"><span class="keyword">while</span> node <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    cost = costs[node] </span><br><span class="line">    neighbors = graph[node] </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> neighbors.keys(): </span><br><span class="line">        new_cost = cost + neighbors[n] </span><br><span class="line">        <span class="keyword">if</span> costs[n] &gt; new_cost:</span><br><span class="line">            costs[n] = new_cost</span><br><span class="line">            parents[n] = node</span><br><span class="line">    processed.append(node)</span><br><span class="line">    node = find_lowest_cost_node(costs)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'路径长度:'</span>, costs[<span class="string">'fin'</span>])</span><br><span class="line">node = <span class="string">'fin'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_node</span><span class="params">(Parents, node)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    递归输出路径</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    next_node = Parents.get(node)</span><br><span class="line">    <span class="keyword">if</span> next_node == <span class="literal">None</span>:</span><br><span class="line">        print(node + <span class="string">" --&gt; "</span>, end = <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print_node(Parents, next_node)</span><br><span class="line">        print(node + <span class="string">" --&gt; "</span>, end = <span class="string">''</span>)</span><br><span class="line"></span><br><span class="line">print_node(parents, node)</span><br></pre></td></tr></table></figure><pre><code>路径长度: 6start --&gt; b --&gt; a --&gt; fin --&gt;</code></pre><p>小结:</p><ul><li>广度优先搜索用于在非加权图中查找最短路径。</li><li>狄克斯特拉算法用于在加权图中查找最短路径。</li><li>仅当权重为正时狄克斯特拉算法才管用。</li><li>如果图中包含负权边，请使用贝尔曼-福德算法。</li></ul><h2 id="8-贪婪算法"><a class="header-anchor" href="#8-贪婪算法"></a>8. 贪婪算法</h2><h3 id="8-1-贪婪算法"><a class="header-anchor" href="#8-1-贪婪算法"></a>8.1 贪婪算法</h3><p>通常作为一种最优解的近似解的 方法存在.</p><img src="https://cdn.jsdelivr.net/gh/18wang/media/算法图解/2.jpg" style="transform:rotate(0deg);" width =600>    寻找能够覆盖所有地区的最小集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">stations = &#123;&#125; </span><br><span class="line">stations[<span class="string">"kone"</span>] = set([<span class="string">"id"</span>, <span class="string">"nv"</span>, <span class="string">"ut"</span>]) </span><br><span class="line">stations[<span class="string">"ktwo"</span>] = set([<span class="string">"wa"</span>, <span class="string">"id"</span>, <span class="string">"mt"</span>]) </span><br><span class="line">stations[<span class="string">"kthree"</span>] = set([<span class="string">"or"</span>, <span class="string">"nv"</span>, <span class="string">"ca"</span>]) </span><br><span class="line">stations[<span class="string">"kfour"</span>] = set([<span class="string">"nv"</span>, <span class="string">"ut"</span>]) </span><br><span class="line">stations[<span class="string">"kfive"</span>] = set([<span class="string">"ca"</span>, <span class="string">"az"</span>]) </span><br><span class="line"></span><br><span class="line">states_needed = set([<span class="string">"mt"</span>, <span class="string">"wa"</span>, <span class="string">"or"</span>, <span class="string">"id"</span>, <span class="string">"nv"</span>, <span class="string">"ut"</span>, </span><br><span class="line"><span class="string">"ca"</span>, <span class="string">"az"</span>])</span><br><span class="line"></span><br><span class="line">final_stations = set()</span><br><span class="line"><span class="keyword">while</span> states_needed: </span><br><span class="line">    best_station = <span class="literal">None</span>         <span class="comment"># 剩余电台中覆盖最广的电台</span></span><br><span class="line">    states_covered = set() </span><br><span class="line">    <span class="keyword">for</span> station, states_for_station <span class="keyword">in</span> stations.items():</span><br><span class="line">        covered = states_needed &amp; states_for_station    <span class="comment"># 计算交集</span></span><br><span class="line">        <span class="keyword">if</span> len(covered) &gt; len(states_covered):</span><br><span class="line">            best_station = station </span><br><span class="line">            states_covered = covered </span><br><span class="line">    final_stations.add(best_station)    <span class="comment"># 添加电台</span></span><br><span class="line">    states_needed -= states_covered     <span class="comment"># 未覆盖的地区更新</span></span><br><span class="line"></span><br><span class="line">print(final_stations)</span><br></pre></td></tr></table></figure><pre><code>{'kfive', 'kthree', 'ktwo', 'kone'}</code></pre><h3 id="8-2-NP-complete-np完全问题"><a class="header-anchor" href="#8-2-NP-complete-np完全问题"></a>8.2 NP-complete np完全问题</h3><p>需要计算所有解, 并选出最优结果. 现今并不存在优化算法, 要想提高效率只能采用近似解.<br>判断一个问题是不是NP-complete问题很难, 同时也很重要.<br>一些重要判断依据:</p><ul><li>元素较少时算法的运行速度非常快，但随着元素数量的增加，速度会变得非常慢。</li><li>涉及“所有组合”的问题通常是NP完全问题。</li><li>不能将问题分成小问题，必须考虑各种可能的情况。这可能是NP完全问题。</li><li>如果问题涉及序列（如旅行商问题中的城市序列）且难以解决，它可能就是NP完全问题。</li><li>如果问题涉及集合（如广播台集合）且难以解决，它可能就是NP完全问题。</li><li>如果问题可转换为集合覆盖问题或旅行商问题，那它肯定是NP完全问题。</li></ul><h2 id="9-动态规划"><a class="header-anchor" href="#9-动态规划"></a>9. 动态规划</h2><p>$$<br>CELL[i][j] = Max \left{\begin{matrix}<br>CELL[i-1][j] \<br>CELL[i][j-1] + CELL[i-1][余量]<br>\end{matrix}\right.<br>$$</p><blockquote><ul><li>行 i 的排序无关紧要, 逐行填充即可, 但动态规划只能处理整件商品.<br>仅当</li></ul></blockquote><ul><li>每个子问题都是离散的，即不依赖于其他子问题时，动态规划才管用。</li></ul><img src="https://cdn.jsdelivr.net/gh/18wang/media/算法图解/3.jpg" style="transform:rotate(0deg);" width =600><p>步骤:</p><ol><li>建立网格</li><li>设定坐标轴</li><li>值的划分</li><li>填充网络, 得到结果</li></ol><p>应用:</p><ol><li>最长公共子序列的寻找</li><li>断词断句</li><li>DNA链相似性</li></ol><h2 id="10-K邻近算法-KNN"><a class="header-anchor" href="#10-K邻近算法-KNN"></a>10. K邻近算法 KNN</h2><p><code>距离公式</code> &amp; <code>余弦相似度</code><br><img src="https://cdn.jsdelivr.net/gh/18wang/media/算法图解/4.jpg" style="transform:rotate(0deg);" width =600></p><h2 id="11-接下来如何做"><a class="header-anchor" href="#11-接下来如何做"></a>11. 接下来如何做</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 映射函数 map</span></span><br><span class="line">arr1 = [<span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>]</span><br><span class="line">arr2 = map(<span class="keyword">lambda</span> x: x*<span class="number">2</span>, arr1)</span><br><span class="line">print(arr2)</span><br></pre></td></tr></table></figure><pre><code>&lt;map object at 0x000001CB1997A088&gt;</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 归并函数 reduce </span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">arr3 = reduce(<span class="keyword">lambda</span> x, y: x+y, arr1)</span><br><span class="line">print(arr3)</span><br></pre></td></tr></table></figure><pre><code>22</code></pre><p><code>布隆过滤器</code>是卓越的数据结构, 用于告诉我们某样东西一定不错在或者很可能存在.<br>占用很少的空间, 更高效地得到近似结果. 如果存在, 则很有可能存在. 如果不存在, 则一定不存在.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对称信号求差法寻找最值</title>
      <link href="/2020/09/12/%E5%AF%B9%E7%A7%B0%E4%BF%A1%E5%8F%B7%E6%B1%82%E5%B7%AE%E6%B3%95%E5%AF%BB%E6%89%BE%E6%9C%80%E5%80%BC/"/>
      <url>/2020/09/12/%E5%AF%B9%E7%A7%B0%E4%BF%A1%E5%8F%B7%E6%B1%82%E5%B7%AE%E6%B3%95%E5%AF%BB%E6%89%BE%E6%9C%80%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="对称信号求差法寻找最值"><a class="header-anchor" href="#对称信号求差法寻找最值"></a>对称信号求差法寻找最值</h2><p>兴哥给了我几组数据, 里面包括了(方位角/俯仰角), 光强值, 距离. 需要寻找最大光强值, 得到对应的角度; 寻找最小的距离值, 得到对应的角度.<br>尤其是 光强-角度 图像, 存在非常大的噪声, 我设计了一个独特的算法, 得到了比较好的结果.</p><p>核心公式就是:</p><p>$Res(k) = \sum_{i=1}<sup>{N}{(f(k-i)-f(k+i-1))}</sup>2 / N$</p><p>$k$ 是对应下标, $N$ 是门限宽度.</p><p>理想的对称波形, 没有噪声, 应该是标准的 M 型. 如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/%E5%AF%B9%E7%A7%B0%E4%BF%A1%E5%8F%B7%E6%B1%82%E5%B7%AE%E6%B3%95%E5%AF%BB%E6%89%BE%E6%9C%80%E5%80%BC/1.svg" alt="svg"></p><p>对于含有噪声的波形, 我们同样可以认为, 最低点是信号的最高点, 因为基底的信号对 M 形状的下凹贡献良多. 可能需要进一步的数学证明, 不过目前来看效果还行.</p><p>代码和部分数据放在<a href="https://cdn.jsdelivr.net/gh/18wang/media%E5%AF%B9%E7%A7%B0%E4%BF%A1%E5%8F%B7%E6%B1%82%E5%B7%AE%E6%B3%95%E5%AF%BB%E6%89%BE%E6%9C%80%E5%80%BC" target="_blank" rel="noopener">这里</a>.</p><p>Matlab代码</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%&#123;</span></span><br><span class="line"><span class="comment">考虑使用光强的对称性, 最高点处光信号突变独特很难用滤波和拟合恢复,</span></span><br><span class="line"><span class="comment"> 两侧存在大量信号, 且它们的噪声比较接近, 适合用作比较</span></span><br><span class="line"><span class="comment">1.计算 Res(k) = i 属于 (1, windowSize) Σ(X(k+i)-X(k-i))^2 , k = 1, 2, ...  </span></span><br><span class="line"><span class="comment">2. 注意到 Res 图像, 呈 M 型, 完美的对称图形中间的局部最小值应该为0, 该点位置即为我们要求取的点, 取两边光滑且对称的点</span></span><br><span class="line"><span class="comment">    a. 设定一个门限, 计算相同y值对应的横坐标x的平均数, 即为所求的x </span></span><br><span class="line"><span class="comment">    b. 拟合两条曲线, 交点即为x, 且两条曲线理论上关于y轴对称; 或者将两条曲线 放在一个场景中进行拟合, 最高点为x. </span></span><br><span class="line"><span class="comment">    c. M 中间的局部最小值即对应着光强最大点</span></span><br><span class="line"><span class="comment">3. 后续处理</span></span><br><span class="line"><span class="comment">%&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 数据读取</span></span><br><span class="line">fileName = <span class="string">"E:/Temp/9-9/15.txt"</span>;</span><br><span class="line">data = csvread(fileName);       </span><br><span class="line">rim = data(:, <span class="number">2</span>);           <span class="comment">% 表格第二列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 窗口宽度确定</span></span><br><span class="line">Len = <span class="built_in">length</span>(rim);</span><br><span class="line">half = <span class="built_in">fix</span>(Len/<span class="number">2</span>);</span><br><span class="line">[Max, LMax] = <span class="built_in">max</span>(rim);             <span class="comment">% 光强最大值</span></span><br><span class="line">index50 = MaxPercent(rim, Max*<span class="number">0.40</span>, <span class="number">20</span>);</span><br><span class="line">windowSize = <span class="number">1</span> * (index50(<span class="keyword">end</span>) - index50(<span class="number">1</span>));   <span class="comment">% 窗口宽度和那几个值的最外界相关  窗口长度的选择比较重要</span></span><br><span class="line"><span class="keyword">if</span>(windowSize&lt;Len/<span class="number">20</span>)</span><br><span class="line">    windowSize = <span class="built_in">fix</span>(Len/<span class="number">20</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">if</span>( LMax - <span class="number">3</span>*windowSize &lt; <span class="number">1</span> ) || (LMax + <span class="number">3</span>*windowSize &gt; Len)</span><br><span class="line">    windowSize = <span class="built_in">fix</span>(windowSize/<span class="number">2</span>); </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Res = <span class="built_in">zeros</span>(Len,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">subplot(<span class="number">211</span>);</span><br><span class="line"><span class="built_in">plot</span>( data(:, <span class="number">1</span>), rim);</span><br><span class="line">text(data(LMax,<span class="number">1</span>), Max, num2str(data(LMax,<span class="number">1</span>)) );</span><br><span class="line"></span><br><span class="line"><span class="comment">%% 计算窗口左右两侧 Res, 差的平方</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span> = <span class="built_in">ceil</span>(LMax<span class="number">-2</span>*windowSize) : <span class="built_in">ceil</span>(LMax+<span class="number">2</span>*windowSize)</span><br><span class="line">    diff = rim(<span class="built_in">i</span>: <span class="number">-1</span>: <span class="built_in">i</span>-windowSize+<span class="number">1</span>) - rim(<span class="built_in">i</span>+<span class="number">1</span>:<span class="built_in">i</span>+windowSize);</span><br><span class="line">    res = sum(diff.^<span class="number">2</span>)/windowSize;</span><br><span class="line">    Res(<span class="built_in">i</span>+<span class="number">1</span>) = res;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">% figure(2);</span></span><br><span class="line"></span><br><span class="line">subplot(<span class="number">212</span>);</span><br><span class="line"><span class="built_in">plot</span>(data(:, <span class="number">1</span>), Res, <span class="string">'m'</span>);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line"><span class="comment">%% a采用平均数, 计算中心位置 </span></span><br><span class="line"><span class="comment">% 取两侧光滑曲线 找对应点</span></span><br><span class="line">lowGate = <span class="number">0.3</span>;     <span class="comment">% 低点处门限</span></span><br><span class="line">upGate = <span class="number">0.70</span>;      <span class="comment">% 高点处门限</span></span><br><span class="line">[MaxR, MRL] = <span class="built_in">max</span>(Res);</span><br><span class="line">indexlow = MaxPercent(Res, MaxR*lowGate, <span class="number">10</span>);    <span class="comment">% 求取 n个 位于门限附近的点, 取最外侧作为门限</span></span><br><span class="line">indexup = MaxPercent(Res, MaxR*upGate, <span class="number">10</span>);</span><br><span class="line">indexlowL = indexlow(<span class="number">1</span>);                        <span class="comment">% 取最外侧两个做为侧边, 可能存在风险</span></span><br><span class="line">indexlowR = indexlow(<span class="keyword">end</span>);</span><br><span class="line">indexupL = indexup(<span class="number">1</span>);</span><br><span class="line">indexupR = indexup(<span class="keyword">end</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% indexlowL = MaxPercent(Res(MRL-2*windowSize:MRL), MaxR*lowGate, 1) + MRL-2*windowSize-1;</span></span><br><span class="line"><span class="comment">% indexupR = MaxPercent(Res(MRL+windowSize*1.5:3*windowSize+MRL), MaxR*upGate, 1) + MRL-1+windowSize*1.5;</span></span><br><span class="line"><span class="comment">% indexlowR = MaxPercent(Res(MRL:2*windowSize+MRL), MaxR*lowGate, 1) + MRL-1;</span></span><br><span class="line"><span class="comment">% indexupL = MaxPercent(Res(MRL-2*windowSize:MRL), MaxR*upGate, 1) + MRL-2*windowSize-1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% plot(indexlowL, Res(indexlowL), 'ko');</span></span><br><span class="line"><span class="comment">% plot(indexlowR, Res(indexlowR), 'b^');</span></span><br><span class="line"><span class="comment">% plot(indexupL, Res(indexupL), 'ko');</span></span><br><span class="line"><span class="comment">% plot(indexupR, Res(indexupR), 'b^');</span></span><br><span class="line"><span class="comment">% hold on;</span></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">ceil</span>(<span class="built_in">mean</span>([indexlowL, indexlowR, indexupL, indexupR]));     <span class="comment">% 坐标均值 结果  </span></span><br><span class="line">R1 = data(result,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">%% b采用拟合, 计算中心位置</span></span><br><span class="line">LeftRes =Res(indexlowL: indexupL);</span><br><span class="line">RightRes =Res(indexupR: indexlowR);</span><br><span class="line">x1 = [indexlowL: indexupL]';</span><br><span class="line"><span class="comment">% fL=fit(x1, LeftRes,'rat42');          % 分别拟合, 拟合函数应当对称</span></span><br><span class="line"><span class="comment">% plot(fL, x1, LeftRes);</span></span><br><span class="line">x2 = [indexupR: indexlowR]';</span><br><span class="line"><span class="comment">% fR=fit(x2, RightRes,'fourier3');</span></span><br><span class="line"><span class="comment">% plot(fR, x2, RightRes);</span></span><br><span class="line">f=fit([x1; x2], [LeftRes; RightRes],<span class="string">'fourier1'</span>);    <span class="comment">% 或者总体拟合  fourier1 gauss1 poly234 rat41</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">plot</span>(f, [x1; x2], [LeftRes; RightRes]);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"></span><br><span class="line">[M, ML] = <span class="built_in">max</span>(f(indexlowL:indexlowR));          <span class="comment">% 求取 拟合函数 最大值点 结果</span></span><br><span class="line">ML = ML + indexlowL<span class="number">-1</span>;</span><br><span class="line">R2 = data(ML,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">% plot(ML, f(ML), '+','linewidth', 2, 'Color', [153, 230, 0]/255, 'MarkerSize', 10);</span></span><br><span class="line"><span class="comment">% hold off ;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% c寻找 中间的局部最低点</span></span><br><span class="line"><span class="comment">% index = find(Res &gt; 0);</span></span><br><span class="line">[MinR, LMinR] = <span class="built_in">min</span>(Res( LMax-windowSize:LMax+windowSize ));</span><br><span class="line">LMinR = LMinR + LMax - windowSize <span class="number">-1</span>;</span><br><span class="line">R3 = data(LMinR, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">plot</span>(R3, MinR, <span class="string">'+'</span>,<span class="string">'linewidth'</span>, <span class="number">2</span>, <span class="string">'Color'</span>, [<span class="number">153</span>, <span class="number">230</span>, <span class="number">0</span>]/<span class="number">255</span>, <span class="string">'MarkerSize'</span>, <span class="number">10</span>);</span><br><span class="line">text(R3, MinR, num2str(R3) );</span><br><span class="line"></span><br><span class="line">[R1, R2, R3]</span><br><span class="line"></span><br><span class="line"><span class="comment">% imwrite(1, fileName+'.png');</span></span><br><span class="line"><span class="comment">% print(fileName(1:end-4), '-dsvg');</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 寻找数组D中最接近 i 的 n个点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">index</span> = <span class="title">MaxPercent</span><span class="params">(D, i, n)</span></span></span><br><span class="line">    d = <span class="built_in">sort</span>(<span class="built_in">abs</span>(D-<span class="built_in">i</span>));         <span class="comment">% 最接近i的几个值</span></span><br><span class="line">    di = <span class="built_in">find</span>((D &gt;= -d(n)+<span class="built_in">i</span>) &amp; (D &lt;= d(n)+<span class="built_in">i</span>));</span><br><span class="line">    index = di(<span class="number">1</span>:n);            <span class="comment">% 返回前n个点</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>效果还不错, 这是其中的一个示例</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/%E5%AF%B9%E7%A7%B0%E4%BF%A1%E5%8F%B7%E6%B1%82%E5%B7%AE%E6%B3%95%E5%AF%BB%E6%89%BE%E6%9C%80%E5%80%BC/2.svg" alt="svg"></p><p>然后我完成了艰苦卓绝的第一次 C# 开发, 总体上, C# 属于微软出品, 还不错, 但也只是勉强不错. 我用 vs code 强行编写. 非常痛苦</p><p>照例粘上一段核心代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.ComponentModel;</span><br><span class="line"><span class="keyword">using</span> System.Data;</span><br><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DotNetCoreSample</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">// int[] rim = new int[25000];</span></span><br><span class="line">            List&lt;<span class="keyword">int</span>&gt; rim = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            List&lt;<span class="keyword">double</span>&gt; angle = <span class="keyword">new</span> List&lt;<span class="keyword">double</span>&gt;();</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// 1. 文件读取</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 创建一个 StreamReader 的实例来读取文件 </span></span><br><span class="line">                <span class="comment">// using 语句也能关闭 StreamReader</span></span><br><span class="line">                <span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">"E:/Temp/9-9/19.txt"</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">string</span> line;</span><br><span class="line">                    <span class="comment">// 从文件读取并显示行，直到文件的末尾 </span></span><br><span class="line">                    <span class="keyword">while</span> ((line = sr.ReadLine()) != <span class="literal">null</span>)</span><br><span class="line">                    &#123;                        </span><br><span class="line">                        rim.Add(<span class="keyword">int</span>.Parse(line.Split(<span class="string">","</span>)[<span class="number">1</span>]));</span><br><span class="line">                        angle.Add(<span class="keyword">double</span>.Parse(line.Split(<span class="string">","</span>)[<span class="number">0</span>]));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 向用户显示出错消息</span></span><br><span class="line">                Console.WriteLine(<span class="string">"The file could not be read:"</span>);</span><br><span class="line">                Console.WriteLine(e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Console.ReadKey();      </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span>[] Rim = rim.ToArray();</span><br><span class="line">            <span class="keyword">double</span>[] Angle = angle.ToArray();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 窗口宽度确定</span></span><br><span class="line">            <span class="keyword">int</span> rimL = <span class="number">0</span>, MaxL = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> Max = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> windowSize = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> _w = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            Max = Rim.Max();</span><br><span class="line">            MaxL = Rim.ToList().IndexOf(Max); </span><br><span class="line">            rimL = Rim.Length;</span><br><span class="line">            </span><br><span class="line">                <span class="comment">// 求门限附近点</span></span><br><span class="line">            <span class="keyword">double</span>[] diff = <span class="keyword">new</span> <span class="keyword">double</span>[rimL];</span><br><span class="line">            List&lt;<span class="keyword">int</span>&gt; diffL = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rimL; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                diff[i] = Math.Abs(Rim[i] - Max * <span class="number">0.4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            Array.Sort(diff);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rimL; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 找到所有门限附近的点</span></span><br><span class="line">                <span class="comment">// Console.WriteLine(diff[i]);</span></span><br><span class="line">                <span class="keyword">if</span>( Math.Abs(Rim[i] - Max * <span class="number">0.4</span>) &lt;= diff[<span class="number">19</span>])</span><br><span class="line">                &#123;</span><br><span class="line">                    diffL.Add(i);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span>[] _L = diffL.ToArray();</span><br><span class="line">            _w = _L[^<span class="number">1</span>] - _L[<span class="number">0</span>]; </span><br><span class="line">            <span class="comment">// Console.WriteLine("--------");</span></span><br><span class="line">            <span class="comment">// Console.WriteLine(_w);</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 过宽过窄调整</span></span><br><span class="line">            <span class="keyword">if</span>(_w &lt; rimL / <span class="number">20</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                _w = (<span class="keyword">int</span>)(rimL / <span class="number">20</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// windowSize = 2000;</span></span><br><span class="line">            <span class="keyword">if</span>(MaxL - <span class="number">3</span> * _w &lt;= <span class="number">0</span>)            </span><br><span class="line">            &#123;</span><br><span class="line">                _w = (<span class="keyword">int</span>)(_w / <span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(MaxL + <span class="number">3</span> * _w &gt;= rimL)</span><br><span class="line">            &#123;</span><br><span class="line">                _w = (<span class="keyword">int</span>)(_w / <span class="number">3</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            windowSize = _w;</span><br><span class="line">            <span class="comment">// Console.WriteLine("--------");</span></span><br><span class="line">            <span class="comment">// Console.WriteLine(MaxL + 4*windowSize);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 对称求差变换</span></span><br><span class="line">            <span class="keyword">double</span>[] Res = <span class="keyword">new</span> <span class="keyword">double</span>[rimL];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = MaxL<span class="number">-2</span>*windowSize; i &lt; MaxL+<span class="number">2</span>*windowSize; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; windowSize; j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    Res[i] += Math.Pow(Rim[i-j] - Rim[i+j+<span class="number">1</span>], <span class="number">2</span>) / windowSize;</span><br><span class="line">                    <span class="comment">// Res[i] += Math.Pow(Rim[i-j] - Rim[i+j+1], 2) / windowSize;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4. 寻找中间最低点</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// double _R = Res[MaxL - windowSize .. MaxL + windowSize];</span></span><br><span class="line">            <span class="keyword">double</span>[] _R = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span> * windowSize];</span><br><span class="line">            <span class="keyword">int</span> MinL = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">double</span> Min = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = MaxL- windowSize; i &lt; MaxL + windowSize; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                _R[i-MaxL+windowSize] = Res[i];</span><br><span class="line">            &#125;</span><br><span class="line">            Min = _R.Min();</span><br><span class="line">            MinL = _R.ToList().IndexOf(Min);</span><br><span class="line">            MinL += MaxL - windowSize;</span><br><span class="line">            Console.WriteLine(Angle[MinL]);</span><br><span class="line">            Console.WriteLine(windowSize);  </span><br><span class="line">            Console.WriteLine(MaxL);              </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pyinstaller用法</title>
      <link href="/2020/09/03/pyinstaller%E7%94%A8%E6%B3%95/"/>
      <url>/2020/09/03/pyinstaller%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python模拟点云生成</title>
      <link href="/2020/08/24/Python%E6%A8%A1%E6%8B%9F%E7%82%B9%E4%BA%91%E7%94%9F%E6%88%90/"/>
      <url>/2020/08/24/Python%E6%A8%A1%E6%8B%9F%E7%82%B9%E4%BA%91%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h1 id="模拟点云生成"><a class="header-anchor" href="#模拟点云生成"></a>模拟点云生成</h1><p>用python生成点云, 加入一点噪声, 包括平面, 直线和圆柱面的点云</p><p>比较容易, numpy 生成点, 列方程, 画图, 保存(点云的保存要注意一点技巧)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 线点云 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">画一个任意线段点云, 加噪 噪声在noise中</span></span><br><span class="line"><span class="string">可以调节 </span></span><br><span class="line"><span class="string">    - 采样步距 </span></span><br><span class="line"><span class="string">    - 点云参数 t 范围</span></span><br><span class="line"><span class="string">    - 直线方程 X = X0+kx*t, Y = Y0+ky*t, Z = Z0+kz*t</span></span><br><span class="line"><span class="string">    - 噪声大小 或 噪声类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">step = <span class="number">0.1</span>             <span class="comment"># 步距</span></span><br><span class="line">tlim = [<span class="number">-4</span>, <span class="number">10</span>]          <span class="comment"># 参数 t 范围</span></span><br><span class="line">X0, Y0, Z0 = <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>    <span class="comment"># 参数式方程系数</span></span><br><span class="line">kx, ky, kz = <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">t = np.arange(tlim[<span class="number">0</span>], tlim[<span class="number">1</span>], step)       <span class="comment"># 生成点云 t 坐标 列</span></span><br><span class="line">X = X0 + kx * t</span><br><span class="line">Y = Y0 + ky * t</span><br><span class="line">Z = Z0 + kz * t </span><br><span class="line"></span><br><span class="line">noise = (np.random.rand(t.shape[<span class="number">0</span>])<span class="number">-0.5</span>) * <span class="number">0.1</span>       <span class="comment"># 加噪 [-0.5, 0.5) 噪声</span></span><br><span class="line">Zn = Z + noise</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储数据点</span></span><br><span class="line">PC = np.dstack((X, Y, Zn))</span><br><span class="line">PCs = PC.reshape((t.shape[<span class="number">0</span>],<span class="number">-1</span>))</span><br><span class="line">np.savetxt(<span class="string">"E:/LinePC.txt"</span>, PCs, delimiter=<span class="string">','</span>, fmt=<span class="string">"%f"</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">fig = plt.figure()                          </span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line">ax.scatter(X, Y, Zn, c=<span class="string">'r'</span>)  <span class="comment"># 绘制数据点</span></span><br><span class="line">ax.set_zlabel(<span class="string">'Z'</span>)           <span class="comment"># 坐标轴</span></span><br><span class="line">ax.set_ylabel(<span class="string">'Y'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'X'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/python_pointcloud/1.svg" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 平面点云 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">画一个任意平面点云, 加噪 噪声在noise中</span></span><br><span class="line"><span class="string">可以调节 </span></span><br><span class="line"><span class="string">    - X, Y步距 </span></span><br><span class="line"><span class="string">    - 点云 X, Y 范围</span></span><br><span class="line"><span class="string">    - 平面方程 Z = f(X, Y)</span></span><br><span class="line"><span class="string">    - 噪声大小 或 噪声类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">step = <span class="number">0.25</span>             <span class="comment"># 步距</span></span><br><span class="line">xlim = [<span class="number">-4</span>, <span class="number">10</span>]          <span class="comment"># 坐标范围</span></span><br><span class="line">ylim = [<span class="number">-4</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">X = np.arange(xlim[<span class="number">0</span>], xlim[<span class="number">1</span>], step)       <span class="comment"># 生成点云 x坐标 列</span></span><br><span class="line">Y = np.arange(ylim[<span class="number">0</span>], ylim[<span class="number">1</span>], step)</span><br><span class="line">X, Y = np.meshgrid(X, Y)                    <span class="comment"># 生成网格</span></span><br><span class="line">Z = X+Y <span class="comment"># np.zeros_like(X)</span></span><br><span class="line"></span><br><span class="line">x, y = Z.shape                              <span class="comment"># 加噪 [-0.5, 0.5) 噪声</span></span><br><span class="line">noise = (np.random.rand(x, y)<span class="number">-0.5</span>) * <span class="number">0.1</span> </span><br><span class="line">Zn = Z + noise</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储数据点</span></span><br><span class="line">PC = np.dstack((X, Y, Zn))</span><br><span class="line">PCs = PC.reshape((x*y,<span class="number">-1</span>))</span><br><span class="line">np.savetxt(<span class="string">"E:/PlanePC.txt"</span>, PCs, delimiter=<span class="string">','</span>, fmt=<span class="string">"%f"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">fig = plt.figure()                          </span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"><span class="comment"># 具体函数方法可用 help(function) 查看，如：help(ax.plot_surface)</span></span><br><span class="line">ax.plot_surface(X, Y, Zn, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=<span class="string">'rainbow'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'Z'</span>)          <span class="comment"># 坐标轴</span></span><br><span class="line">ax.set_ylabel(<span class="string">'Y'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'X'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/python_pointcloud/2.svg" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 圆柱侧面点云 </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">画一个椭圆柱侧面点云, 以 z轴 为轴心, 向正负方向延申</span></span><br><span class="line"><span class="string">加噪 噪声在noiseX, noiseY中</span></span><br><span class="line"><span class="string">可以调节 </span></span><br><span class="line"><span class="string">    - xoy 截面的采样角度步距 0~2π, z 轴方向的采样步距 </span></span><br><span class="line"><span class="string">    - 点云 z轴 范围</span></span><br><span class="line"><span class="string">    - 椭圆正截面长短轴 (x/a)^2 + (y/b)^2 = 1</span></span><br><span class="line"><span class="string">    - 噪声大小 或 噪声类型</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">stepz = <span class="number">0.2</span>            <span class="comment"># z轴方向步距  </span></span><br><span class="line">stepA = <span class="number">0.1</span>             <span class="comment"># xoy平面角度步距</span></span><br><span class="line">zlim = [<span class="number">-4</span>, <span class="number">1</span>]          <span class="comment"># z坐标范围</span></span><br><span class="line">a, b = <span class="number">1</span>, <span class="number">1</span>             <span class="comment"># 长轴短轴</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"></span><br><span class="line">X = a * np.cos(np.arange(<span class="number">0</span>,<span class="number">2</span>*np.pi,stepA))          <span class="comment"># 生成坐标</span></span><br><span class="line">Y = b * np.sin(np.arange(<span class="number">0</span>,<span class="number">2</span>*np.pi,stepA))</span><br><span class="line">Z = np.arange(zlim[<span class="number">0</span>], zlim[<span class="number">1</span>], stepz)</span><br><span class="line">X, _ = np.meshgrid(X, Z)  </span><br><span class="line">Y, Z = np.meshgrid(Y, Z)  </span><br><span class="line"></span><br><span class="line">shape0, shape1 = X.shape[<span class="number">0</span>], X.shape[<span class="number">1</span>]</span><br><span class="line">noiseX = (np.random.rand(shape0, shape1)<span class="number">-0.5</span>) * <span class="number">0.05</span>   <span class="comment"># 加噪 [-0.25, 0.25) 噪声</span></span><br><span class="line">noiseY = (np.random.rand(shape0, shape1)<span class="number">-0.5</span>) * <span class="number">0.05</span>    <span class="comment"># X Y 均加噪</span></span><br><span class="line">Xn = X + noiseX</span><br><span class="line">Yn = Y + noiseY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储数据点</span></span><br><span class="line">PC = np.dstack((Xn, Yn, Z))</span><br><span class="line">PCs = PC.reshape((shape0*shape1,<span class="number">-1</span>))</span><br><span class="line">np.savetxt(<span class="string">"E:/CylinderPC.txt"</span>, PCs, delimiter=<span class="string">','</span>, fmt=<span class="string">"%f"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">fig = plt.figure()                          </span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"><span class="comment"># 具体函数方法可用 help(function) 查看，如：help(ax.plot_surface)</span></span><br><span class="line">ax.plot_surface(Xn, Yn, Z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>, cmap=<span class="string">'rainbow'</span>)</span><br><span class="line">ax.set_zlabel(<span class="string">'Z'</span>)           <span class="comment"># 坐标轴</span></span><br><span class="line">ax.set_ylabel(<span class="string">'Y'</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">'X'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/python_pointcloud/3.svg" alt=""></p><p>注意到圆柱面有一个豁口, 因为最后一个点和起始点没有首尾相连, 但用于<code>Polyworks</code>并无进一步处理的需要, 示意即可</p><p>保存的点云数据如下图所示</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/python_pointcloud/4.jpg" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kalman_filter</title>
      <link href="/2020/08/19/kalman_filter/"/>
      <url>/2020/08/19/kalman_filter/</url>
      
        <content type="html"><![CDATA[<h1 id="卡尔曼滤波-应用"><a class="header-anchor" href="#卡尔曼滤波-应用"></a>卡尔曼滤波 应用</h1><p>激光雷达测距的数值经常发生跳变, 显示在软件里的值波动有点大.<br>用 matlab 对其进行滤波, 实现更好的显示效果, 提高测量精度.</p><blockquote><p>前情提要</p></blockquote><ul><li>激光雷达的采样率是 1kHz, 1s 采 1000 个数据点</li><li>目前的方法是, 对每1000个点排序, 去掉最大最小各100个点, 取均值, 效果不够好</li><li>拟采用一种滤波的方法, 或者其他任何简单方便的算法, 得到稳定的测距值</li><li>当前只要处理实测距离不变, 测量值的跳变的问题; 若遇实际距离变化, 可能需要其他算法</li></ul><h2 id="数据文件"><a class="header-anchor" href="#数据文件"></a>数据文件</h2><p>存储读数的csv文件结构如 图1 所示</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/kalman_filter/1.jpg" alt=""></p><h2 id="卡尔曼滤波器"><a class="header-anchor" href="#卡尔曼滤波器"></a>卡尔曼滤波器</h2><p>实用参考: 卡尔曼滤波 <a href="https://zhuanlan.zhihu.com/p/39912633" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/39912633</a><br>Matlab实现 <a href="https://blog.csdn.net/zengxiantao1994/article/details/71170728" target="_blank" rel="noopener">https://blog.csdn.net/zengxiantao1994/article/details/71170728</a></p><p>这里面就不再赘述了, 知识点忘记了就回顾一下<br>总之, 卡尔曼滤波在输出预测, 信号滤波方面有着广泛的应用, 而且简单性能不错.</p><p><strong>还可以深入学习的地方就是, 对参数的物理意义进一步深入理解, 便于调解应用</strong></p><h2 id="程序实现"><a class="header-anchor" href="#程序实现"></a>程序实现</h2><p>Matlab 实现</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 卡尔曼滤波</span></span><br><span class="line"><span class="comment">% 实用参考: 卡尔曼滤波 https://zhuanlan.zhihu.com/p/39912633</span></span><br><span class="line"><span class="comment">% Matlab实现 https://blog.csdn.net/zengxiantao1994/article/details/71170728</span></span><br><span class="line"></span><br><span class="line">filename = [<span class="string">"2020-4-18-1320.csv"</span>, <span class="string">"2020-4-18-1324.csv"</span> , <span class="string">"2020-4-18-1339.csv"</span>]; </span><br><span class="line">address = <span class="string">'E:\Temp\testdata\';          % 地址</span></span><br><span class="line"><span class="string">pL = 1000;      % 1khz采样 </span></span><br><span class="line"><span class="string">sz = [2, 1];    % 保存 k-1估计值 和 k时刻估计值 即可</span></span><br><span class="line"><span class="string">Q = 1e-10;      % 过程方差，反映连续两个采样点值的方差  Q↑ 稳定性↓ 示数变化速率↑</span></span><br><span class="line"><span class="string">R = 1e0;        % 测量方差，反映激光器的测量精度    R↑ 稳定性↑ 示数变化速率↓  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">% 卡尔曼滤波器 我这里写的是针对线性系统的, 所以对于距离变化这种非线性的情况比较糟糕, 要么反应慢, 要么效果差</span></span><br><span class="line"><span class="string">% 我们可以设定一个阈值判断, 譬如说前后两秒的均值差距超过 T  , 停用滤波, 差距小于 T (距离不变) 启用卡尔曼滤波</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">for i = 1  % length(filename)       % 文件名循环    </span></span><br><span class="line"><span class="string">    data = csvread(strcat(address, filename(i)));</span></span><br><span class="line"><span class="string">    [row, col] = size(data);                    % 每个csv行列大小</span></span><br><span class="line"><span class="string">    mean1s = zeros([fix(row/pL), 1]);           % 均值 每 1s 数据</span></span><br><span class="line"><span class="string">    mean1skal = zeros([fix(row/pL), 1]);        % kalman滤波后均值</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    %% kalman数据初始化</span></span><br><span class="line"><span class="string">    dhat = zeros(sz);       % 对距离的后验估计, 即在k时刻，结合当前采样值与k-1时刻先验估计，得到结果</span></span><br><span class="line"><span class="string">    dhatresult = zeros([pL,1]);     % 存储 dhat 结果</span></span><br><span class="line"><span class="string">    P = zeros(sz);          % 后验估计方差</span></span><br><span class="line"><span class="string">    dhatminus = zeros(sz);  % 先验估计值</span></span><br><span class="line"><span class="string">    Pminus = zeros(sz);     % 先验估计方差 </span></span><br><span class="line"><span class="string">    K = zeros(sz);          % 卡尔曼增益</span></span><br><span class="line"><span class="string">    dhat(1) = data(1,1)+0.; % 最初的估计, 这里用均值</span></span><br><span class="line"><span class="string">    P(1) = 0.1;             % 方差初值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    for j = 1 :  fix(row/pL)  </span></span><br><span class="line"><span class="string">        % 1s 数据点获取</span></span><br><span class="line"><span class="string">        d1000 = data((j-1)*pL+1:j*pL, 1);        </span></span><br><span class="line"><span class="string">        avg = mean(d1000);      % 均值</span></span><br><span class="line"><span class="string">        mean1s(j) = avg;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        %% 卡尔曼滤波</span></span><br><span class="line"><span class="string">        for k = 2 : pL</span></span><br><span class="line"><span class="string">            dhatminus(2) = dhat(1);       % 时间更新, 沿用之前的估计值</span></span><br><span class="line"><span class="string">            Pminus(2) = P(1) + Q;         % 预测方差=前时刻方差+过程方差</span></span><br><span class="line"><span class="string">            K(2) = Pminus(2) / (Pminus(2) + R); % 计算卡尔曼增益</span></span><br><span class="line"><span class="string">            dhat(2) = dhatminus(2) + K(2) * (d1000(k) - dhatminus(2));  % 校正后最优估计结果</span></span><br><span class="line"><span class="string">            P(2) = (1 - K(2)) * Pminus(2);      % 计算最优估计方差</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            if k == 2</span></span><br><span class="line"><span class="string">                dhatresult(k-1) = dhat(k-1);    % 存储 dhat(1)</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">            dhatresult(k) = dhat(2);</span></span><br><span class="line"><span class="string">            P(1) = P(2);                       % 更新后验估计方差 </span></span><br><span class="line"><span class="string">            dhat(1) = dhat(2);                 % 更新下 1s 最初的估计, 这里用上一秒最后一个采样点</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        mean1skal(j) = mean(dhatresult(1:end));   % 取 某 点以后的</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        % %% 画图 滤波前后 对比结果</span></span><br><span class="line"><span class="string">        % figure(1);</span></span><br><span class="line"><span class="string">        % plot((j-1)*pL+1:j*pL, dhat);</span></span><br><span class="line"><span class="string">        % hold on;</span></span><br><span class="line"><span class="string">        % % plot([lmax+(j-1)*pL, lmin+(j-1)*pL], [dmax,dmin], '</span>ro');</span><br><span class="line">        <span class="comment">% % hold on;</span></span><br><span class="line">        <span class="comment">% plot((j-1)*pL+1:j*pL, d1000);</span></span><br><span class="line">        <span class="comment">% hold on;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">% plot([(j-1)*pL+1, j*pL], [avg, avg], 'g');</span></span><br><span class="line">        <span class="comment">% % legend(&#123;'datacurve',strcat('extreme point \delta:', num2str(delta), ' avg:', num2str(avg)) &#125;, 'Location', 'best');</span></span><br><span class="line">        <span class="comment">% hold off;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">% % 保存图片</span></span><br><span class="line">        <span class="comment">% saveas(1, strcat(address, 'figure\kalman',  filename(i), '-',num2str(j), '.jpg'));           </span></span><br><span class="line">        <span class="comment">% close;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">figure</span>(<span class="built_in">i</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">plot</span>(mean1skal(<span class="number">1</span>:<span class="keyword">end</span>), <span class="string">'-o'</span>);</span><br><span class="line">    <span class="built_in">hold</span> on;</span><br><span class="line">    </span><br><span class="line">    title(<span class="string">'kalman vs ordinary data mean'</span>);</span><br><span class="line">    xlabel(<span class="string">'s'</span>);</span><br><span class="line">    ylabel(<span class="string">'value'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">plot</span>(mean1s(<span class="number">1</span>:<span class="keyword">end</span>), <span class="string">'--^'</span>);</span><br><span class="line">    <span class="built_in">hold</span> off;   </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="结果展示"><a class="header-anchor" href="#结果展示"></a>结果展示</h2><p>取了前10s的信号, 红色是原始信号, 绿色是原始信号均值, 蓝色是滤波后信号, 效果很不错.</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/kalman_filter/2.svg" alt="svg"></p><p>把每秒的1000个信号取均值, 画出来的结果, 也显示, 平稳了很多.</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/kalman_filter/3.svg" alt="svg"></p><p><em>程序和数据文件被放在了<a href="https://github.com/18wang/media/tree/master/kalman_filter">这里</a></em></p><p><em>还有媛姐改成的<a href="https://github.com/18wang/media/tree/master/kalman_filter/Kalman">C#文件</a></em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深度学习入门：基于Python的理论与实现-斋藤康毅</title>
      <link href="/2020/08/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%9A%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%96%8B%E8%97%A4%E5%BA%B7%E6%AF%85/"/>
      <url>/2020/08/16/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%9A%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%96%8B%E8%97%A4%E5%BA%B7%E6%AF%85/</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习入门：基于Python的理论与实现"><a class="header-anchor" href="#深度学习入门：基于Python的理论与实现"></a>深度学习入门：基于Python的理论与实现</h1><p>一本蛮简单的深度学习入门, 希望自己快快地过一遍!<br>随便记一些东西, 但愿可以.</p><p>资料:<br><a href="https://github.com/MemorialCheng/deep-learning-from-scratch" target="_blank" rel="noopener">https://github.com/MemorialCheng/deep-learning-from-scratch</a>  中文版<br><a href="https://github.com/oreilly-japan/deep-learning-from-scratch" target="_blank" rel="noopener">https://github.com/oreilly-japan/deep-learning-from-scratch</a>  日文原版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br><span class="line">b = np.array([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">print(a.shape, b.shape)</span><br><span class="line"></span><br><span class="line">print(np.dot(a, b))     <span class="comment"># 点积</span></span><br></pre></td></tr></table></figure><pre><code>(2, 3) (3,)[16 10]</code></pre><h2 id="第三章-神经网络"><a class="header-anchor" href="#第三章-神经网络"></a>第三章 神经网络</h2><p>神经网络的任一权重:</p><p>$$\displaystyle W^{( 1)}_{12}$$</p><p>上标表明作用在第几层, 下标表示连接前层中的2到当前层中的1.</p><p>总体上可以写作:</p><p>$$ A^{(1)} = XW^{(1)} + B^{(1)}$$</p><p>B为偏置, X为前层输入, A为该层结果, W为权重</p><h3 id="实现一个3层神经网络"><a class="header-anchor" href="#实现一个3层神经网络"></a>实现一个3层神经网络</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">X = np.array([<span class="number">1.0</span>, <span class="number">0.5</span>])</span><br><span class="line">W1 = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.5</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>, <span class="number">0.6</span>]])</span><br><span class="line">B1 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>, <span class="number">0.3</span>])</span><br><span class="line"></span><br><span class="line">print(W1.shape) <span class="comment"># (2, 3)</span></span><br><span class="line">print(X.shape) <span class="comment"># (2,)</span></span><br><span class="line">print(B1.shape) <span class="comment"># (3,)</span></span><br><span class="line"></span><br><span class="line">A1 = np.dot(X, W1) + B1</span><br><span class="line"></span><br><span class="line">print(A1)</span><br></pre></td></tr></table></figure><pre><code>(2, 3)(2,)(3,)[0.3 0.7 1.1]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span>+np.exp(<span class="number">-1</span>*a))</span><br><span class="line"></span><br><span class="line">Z1 = sigmoid(A1)        <span class="comment"># Z1 第一层激活函数作用后的结果</span></span><br><span class="line">print(A1) <span class="comment"># [0.3, 0.7, 1.1]</span></span><br><span class="line">print(Z1) <span class="comment"># [0.57444252, 0.66818777, 0.75026011]</span></span><br></pre></td></tr></table></figure><pre><code>[0.3 0.7 1.1][0.57444252 0.66818777 0.75026011]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">W2 = np.array([[<span class="number">0.1</span>, <span class="number">0.4</span>], [<span class="number">0.2</span>, <span class="number">0.5</span>], [<span class="number">0.3</span>, <span class="number">0.6</span>]])</span><br><span class="line">B2 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line"></span><br><span class="line">A2 = np.dot(Z1, W2) + B2</span><br><span class="line">Z2 = sigmoid(A2)</span><br><span class="line">print(Z2)           <span class="comment"># 从第一层到第二层</span></span><br></pre></td></tr></table></figure><pre><code>[0.62624937 0.7710107 ]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity_function</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">W3 = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>], [<span class="number">0.2</span>, <span class="number">0.4</span>]])</span><br><span class="line">B3 = np.array([<span class="number">0.1</span>, <span class="number">0.2</span>])</span><br><span class="line">A3 = np.dot(Z2, W3) + B3</span><br><span class="line">Y = identity_function(A3)       <span class="comment"># 这里我们的输出层的激活函数是一个恒等函数</span></span><br><span class="line"><span class="comment"># 或者Y = A3</span></span><br><span class="line">print(Y)</span><br></pre></td></tr></table></figure><pre><code>[0.31682708 0.69627909]</code></pre><p>输出层的激活函数选取问题:<br>回归问题可以使用恒等函数，二元分类问题可以使用 sigmoid 函数，多元分类问题可以使用 softmax 函数</p><p>softmax 函数表达式: $$y_k = \frac{exp(a_k)}{\sum_{i=1}^{n}exp(a_i)}$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">softmax</span><span class="params">(a)</span>:</span></span><br><span class="line">    c = np.max(a)</span><br><span class="line">    exp_a = np.exp(a - c) <span class="comment"># 溢出对策, a太大很容易溢出</span></span><br><span class="line">    <span class="keyword">return</span> exp_a/sum(exp_a)</span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">0.3</span>, <span class="number">2.9</span>, <span class="number">4.0</span>])</span><br><span class="line">y = softmax(a)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">print(sum(y))   <span class="comment"># 和永远是1, 可以认为 Yk 是一个输出概率</span></span><br></pre></td></tr></table></figure><pre><code>[0.01821127 0.24519181 0.73659691]1.0</code></pre><h3 id="MNIST-手写字"><a class="header-anchor" href="#MNIST-手写字"></a>MNIST 手写字</h3><p>经典的手写字识别例子, 可能是不允许爬虫了, 只能手动下载文件到对应目录, 但是问题不大.<br>让我们照着它的代码开始吧!</p><ul><li>我们做了一个数据的加载工作, load_mnist: flatten 展开数据 normalize 归一化每个像素</li><li>使用 <code>pickle</code> 保存实时的运行对象, 简化运算过程. 方便存取网络的权重</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入数据</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">os.chdir(<span class="string">"E:/Temp/deep-learning-from-scratch-master/ch03"</span>)</span><br><span class="line">sys.path.append(os.pardir)  <span class="comment"># pardir 当前目录的父目录</span></span><br><span class="line"><span class="keyword">from</span> dataset.mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"><span class="comment"># 第⼀次调⽤会花费⼏分钟……</span></span><br><span class="line">(x_train, t_train), (x_test, t_test) =load_mnist(flatten=<span class="literal">True</span>,normalize=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 输出各个数据的形状</span></span><br><span class="line">print(x_train.shape) <span class="comment"># (60000, 784)</span></span><br><span class="line">print(t_train.shape) <span class="comment"># (60000,)</span></span><br><span class="line">print(x_test.shape) <span class="comment"># (10000, 784)</span></span><br><span class="line">print(t_test.shape) <span class="comment"># (10000,)</span></span><br></pre></td></tr></table></figure><pre><code>(60000, 784)(60000,)(10000, 784)(10000,)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示MNIST图像</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.pardir)</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> dataset.mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image       <span class="comment"># 熟悉的PIL模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">img_show</span><span class="params">(img)</span>:</span></span><br><span class="line">    pil_img = Image.fromarray(np.uint8(img))</span><br><span class="line">    pil_img.show()</span><br><span class="line"></span><br><span class="line">(x_train, t_train), (x_test, t_test) = load_mnist(flatten=<span class="literal">True</span>, normalize=<span class="literal">False</span>)</span><br><span class="line">img = x_train[<span class="number">0</span>]</span><br><span class="line">label = t_train[<span class="number">0</span>]</span><br><span class="line">print(label) <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line">print(img.shape) <span class="comment"># (784,)   已经 flatten 过了</span></span><br><span class="line">img = img.reshape(<span class="number">28</span>, <span class="number">28</span>) <span class="comment"># 把图像的形状变成原来的尺⼨</span></span><br><span class="line">print(img.shape) <span class="comment"># (28, 28)</span></span><br><span class="line">img_show(img)</span><br></pre></td></tr></table></figure><pre><code>5(784,)(28, 28)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建神经网络</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    (x_train, t_train), (x_test, t_test) = load_mnist(normalize=<span class="literal">True</span>, flatten=<span class="literal">True</span>, one_hot_label=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> x_test, t_test</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_network</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    初始化神经网络</span></span><br><span class="line"><span class="string">    已经学习好的权重数据在sample_weight.pkl中</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"sample_weight.pkl"</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        network = pickle.load(f)</span><br><span class="line">    <span class="keyword">return</span> network</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(network, x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    三层神经网络</span></span><br><span class="line"><span class="string">    输出采用softmax函数</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    W1, W2, W3 = network[<span class="string">'W1'</span>], network[<span class="string">'W2'</span>], network[<span class="string">'W3'</span>]</span><br><span class="line">    b1, b2, b3 = network[<span class="string">'b1'</span>], network[<span class="string">'b2'</span>], network[<span class="string">'b3'</span>]</span><br><span class="line">    a1 = np.dot(x, W1) + b1</span><br><span class="line">    z1 = sigmoid(a1)</span><br><span class="line">    a2 = np.dot(z1, W2) + b2</span><br><span class="line">    z2 = sigmoid(a2)</span><br><span class="line">    a3 = np.dot(z2, W3) + b3</span><br><span class="line">    y = softmax(a3)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开始学习</span></span><br><span class="line"></span><br><span class="line">x, t = get_data()</span><br><span class="line">network = init_network()</span><br><span class="line">accuracy_cnt = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">    y = predict(network, x[i])</span><br><span class="line">    <span class="comment"># np.argmax(x) 将获取被赋给参数 x 的数组中的最大值元素的索引</span></span><br><span class="line">    p = np.argmax(y) <span class="comment"># 获取概率最⾼的元素的索引</span></span><br><span class="line">    <span class="keyword">if</span> p == t[i]:</span><br><span class="line">        accuracy_cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Accuracy:"</span> + str(float(accuracy_cnt) / len(x)))</span><br></pre></td></tr></table></figure><pre><code>Accuracy:0.9352</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 批处理 提高运算速度</span></span><br><span class="line"></span><br><span class="line">x, t = get_data()</span><br><span class="line">network = init_network()</span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批数量</span></span><br><span class="line">accuracy_cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(x), batch_size):</span><br><span class="line">    x_batch = x[i:i+batch_size]</span><br><span class="line">    y_batch = predict(network, x_batch)</span><br><span class="line">    p = np.argmax(y_batch, axis=<span class="number">1</span>)</span><br><span class="line">    accuracy_cnt += np.sum(p == t[i:i+batch_size])</span><br></pre></td></tr></table></figure><h2 id="第四章-神经网络的学习"><a class="header-anchor" href="#第四章-神经网络的学习"></a>第四章 神经网络的学习</h2><p>最终目的, 提高泛化能力</p><p>损失函数:<br>对于单个样本</p><ol><li>均方误差 $ E=\frac{1}{2}\sum_{k}(y_k-t_k)^2$</li><li>交叉熵误差 $ E=-\sum_{k}t_k log(y_k) $</li></ol><p>实际的学习中, 常用小批量(mini batch)学习, 将样本顺序打乱, 固定个数的样本为一组, 提高效率, 防止过拟合.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交叉熵误差</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cross_entropy_error</span><span class="params">(y, t)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> y.ndim == <span class="number">1</span>:</span><br><span class="line">        t = t.reshape(<span class="number">1</span>, t.size)</span><br><span class="line">        y = y.reshape(<span class="number">1</span>, y.size)</span><br><span class="line">    </span><br><span class="line">    batch_size = y.shape[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> -np.sum(t * np.log(y + <span class="number">1e-7</span>)) / batch_size</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">numerical_gradient</span><span class="params">(f, x)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    f(x) 在 x 处的 数值 梯度</span></span><br><span class="line"><span class="string">    f 为函数对象</span></span><br><span class="line"><span class="string">    x 为偏导所在位置, 可以是数组 </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    h = <span class="number">1e-4</span> <span class="comment"># 0.0001</span></span><br><span class="line">    grad = np.zeros_like(x) <span class="comment"># ⽣成和x形状相同的数组</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(x.size):</span><br><span class="line">        tmp_val = x[idx]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># f(x+h)的计算</span></span><br><span class="line">        x[idx] = tmp_val + h</span><br><span class="line">        fxh1 = f(x)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># f(x-h)的计算</span></span><br><span class="line">        x[idx] = tmp_val - h</span><br><span class="line">        fxh2 = f(x)</span><br><span class="line"></span><br><span class="line">        grad[idx] = (fxh1 - fxh2) / (<span class="number">2</span>*h)</span><br><span class="line">        x[idx] = tmp_val <span class="comment"># 还原值</span></span><br><span class="line">    <span class="keyword">return</span> grad</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_2</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x[<span class="number">0</span>]**<span class="number">2</span> + x[<span class="number">1</span>]**<span class="number">2</span></span><br><span class="line"><span class="comment"># 或者return np.sum(x**2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 都是 int 就悲剧了, float 没事, 可能是数值精度问题.</span></span><br><span class="line">print(numerical_gradient(function_2, np.array([<span class="number">3.0</span>, <span class="number">4.0</span>])))</span><br></pre></td></tr></table></figure><pre><code>[6. 8.]</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两层神经网络</span></span><br><span class="line"><span class="comment"># coding: utf-8 </span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">os.chdir(<span class="string">"E:/Temp/deep-learning-from-scratch-master/ch04"</span>)</span><br><span class="line">sys.path.append(os.pardir)  <span class="comment"># 为了导入父目录的文件而进行的设定</span></span><br><span class="line"><span class="keyword">from</span> common.functions <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> common.gradient <span class="keyword">import</span> numerical_gradient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoLayerNet</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_size, hidden_size, output_size, weight_init_std=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">        <span class="comment"># 初始化权重</span></span><br><span class="line">        self.params = &#123;&#125;</span><br><span class="line">        self.params[<span class="string">'W1'</span>] = weight_init_std * np.random.randn(input_size, hidden_size)</span><br><span class="line">        self.params[<span class="string">'b1'</span>] = np.zeros(hidden_size)</span><br><span class="line">        self.params[<span class="string">'W2'</span>] = weight_init_std * np.random.randn(hidden_size, output_size)</span><br><span class="line">        self.params[<span class="string">'b2'</span>] = np.zeros(output_size)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        W1, W2 = self.params[<span class="string">'W1'</span>], self.params[<span class="string">'W2'</span>]</span><br><span class="line">        b1, b2 = self.params[<span class="string">'b1'</span>], self.params[<span class="string">'b2'</span>]</span><br><span class="line">    </span><br><span class="line">        a1 = np.dot(x, W1) + b1</span><br><span class="line">        z1 = sigmoid(a1)</span><br><span class="line">        a2 = np.dot(z1, W2) + b2</span><br><span class="line">        y = softmax(a2)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># x:输入数据, t:监督数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loss</span><span class="params">(self, x, t)</span>:</span></span><br><span class="line">        y = self.predict(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cross_entropy_error(y, t)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(self, x, t)</span>:</span></span><br><span class="line">        y = self.predict(x)</span><br><span class="line">        y = np.argmax(y, axis=<span class="number">1</span>)</span><br><span class="line">        t = np.argmax(t, axis=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        accuracy = np.sum(y == t) / float(x.shape[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">return</span> accuracy</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># x:输入数据, t:监督数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numerical_gradient</span><span class="params">(self, x, t)</span>:</span></span><br><span class="line">        loss_W = <span class="keyword">lambda</span> W: self.loss(x, t)</span><br><span class="line">        </span><br><span class="line">        grads = &#123;&#125;</span><br><span class="line">        grads[<span class="string">'W1'</span>] = numerical_gradient(loss_W, self.params[<span class="string">'W1'</span>])</span><br><span class="line">        grads[<span class="string">'b1'</span>] = numerical_gradient(loss_W, self.params[<span class="string">'b1'</span>])</span><br><span class="line">        grads[<span class="string">'W2'</span>] = numerical_gradient(loss_W, self.params[<span class="string">'W2'</span>])</span><br><span class="line">        grads[<span class="string">'b2'</span>] = numerical_gradient(loss_W, self.params[<span class="string">'b2'</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> grads</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(self, x, t)</span>:</span></span><br><span class="line">        W1, W2 = self.params[<span class="string">'W1'</span>], self.params[<span class="string">'W2'</span>]</span><br><span class="line">        b1, b2 = self.params[<span class="string">'b1'</span>], self.params[<span class="string">'b2'</span>]</span><br><span class="line">        grads = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        batch_num = x.shape[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># forward</span></span><br><span class="line">        a1 = np.dot(x, W1) + b1</span><br><span class="line">        z1 = sigmoid(a1)</span><br><span class="line">        a2 = np.dot(z1, W2) + b2</span><br><span class="line">        y = softmax(a2)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># backward</span></span><br><span class="line">        dy = (y - t) / batch_num</span><br><span class="line">        grads[<span class="string">'W2'</span>] = np.dot(z1.T, dy)</span><br><span class="line">        grads[<span class="string">'b2'</span>] = np.sum(dy, axis=<span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        da1 = np.dot(dy, W2.T)</span><br><span class="line">        dz1 = sigmoid_grad(a1) * da1</span><br><span class="line">        grads[<span class="string">'W1'</span>] = np.dot(x.T, dz1)</span><br><span class="line">        grads[<span class="string">'b1'</span>] = np.sum(dz1, axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> grads</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 两层神经网络 进行mini-batch训练</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">sys.path.append(os.pardir)  <span class="comment"># 为了导入父目录的文件而进行的设定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> dataset.mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"><span class="keyword">from</span> two_layer_net <span class="keyword">import</span> TwoLayerNet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">(x_train, t_train), (x_test, t_test) = load_mnist(normalize=<span class="literal">True</span>, one_hot_label=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">network = TwoLayerNet(input_size=<span class="number">784</span>, hidden_size=<span class="number">50</span>, output_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">iters_num = <span class="number">10000</span>  <span class="comment"># 适当设定循环的次数</span></span><br><span class="line">train_size = x_train.shape[<span class="number">0</span>]</span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">learning_rate = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">train_loss_list = []</span><br><span class="line">train_acc_list = []</span><br><span class="line">test_acc_list = []</span><br><span class="line"></span><br><span class="line">iter_per_epoch = max(train_size / batch_size, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(iters_num):</span><br><span class="line">    batch_mask = np.random.choice(train_size, batch_size)</span><br><span class="line">    x_batch = x_train[batch_mask]</span><br><span class="line">    t_batch = t_train[batch_mask]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算梯度</span></span><br><span class="line">    <span class="comment">#grad = network.numerical_gradient(x_batch, t_batch)</span></span><br><span class="line">    grad = network.gradient(x_batch, t_batch)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新参数</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> (<span class="string">'W1'</span>, <span class="string">'b1'</span>, <span class="string">'W2'</span>, <span class="string">'b2'</span>):</span><br><span class="line">        network.params[key] -= learning_rate * grad[key]</span><br><span class="line">    </span><br><span class="line">    loss = network.loss(x_batch, t_batch)</span><br><span class="line">    train_loss_list.append(loss)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每个 mini batch 之后判断准确率</span></span><br><span class="line">    <span class="keyword">if</span> i % iter_per_epoch == <span class="number">0</span>:</span><br><span class="line">        train_acc = network.accuracy(x_train, t_train)</span><br><span class="line">        test_acc = network.accuracy(x_test, t_test)</span><br><span class="line">        train_acc_list.append(train_acc)</span><br><span class="line">        test_acc_list.append(test_acc)</span><br><span class="line">        print(<span class="string">"train acc, test acc | "</span> + str(train_acc) + <span class="string">", "</span> + str(test_acc))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图形</span></span><br><span class="line">markers = &#123;<span class="string">'train'</span>: <span class="string">'o'</span>, <span class="string">'test'</span>: <span class="string">'s'</span>&#125;</span><br><span class="line">x = np.arange(len(train_acc_list))</span><br><span class="line">plt.plot(x, train_acc_list, label=<span class="string">'train acc'</span>)</span><br><span class="line">plt.plot(x, test_acc_list, label=<span class="string">'test acc'</span>, linestyle=<span class="string">'--'</span>)</span><br><span class="line">plt.xlabel(<span class="string">"epochs"</span>)</span><br><span class="line">plt.ylabel(<span class="string">"accuracy"</span>)</span><br><span class="line">plt.ylim(<span class="number">0</span>, <span class="number">1.0</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'lower right'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>train acc, test acc | 0.10218333333333333, 0.101train acc, test acc | 0.7860666666666667, 0.7923train acc, test acc | 0.8741666666666666, 0.8779train acc, test acc | 0.8971333333333333, 0.9007train acc, test acc | 0.9080833333333334, 0.9108train acc, test acc | 0.91445, 0.9182train acc, test acc | 0.9196833333333333, 0.9227train acc, test acc | 0.9234166666666667, 0.9271train acc, test acc | 0.9276, 0.9308train acc, test acc | 0.9304166666666667, 0.9339train acc, test acc | 0.9337166666666666, 0.935train acc, test acc | 0.9369666666666666, 0.937train acc, test acc | 0.9384833333333333, 0.9397train acc, test acc | 0.9418, 0.9421train acc, test acc | 0.9435333333333333, 0.9436train acc, test acc | 0.9456, 0.9459train acc, test acc | 0.9472833333333334, 0.9471</code></pre><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8%EF%BC%9A%E5%9F%BA%E4%BA%8EPython%E7%9A%84%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E6%96%8B%E8%97%A4%E5%BA%B7%E6%AF%85/output_19_1.svg" alt=""></p><h2 id="第五章-误差反向传播法"><a class="header-anchor" href="#第五章-误差反向传播法"></a>第五章 误差反向传播法</h2><p>使用计算图的知识, 利用图的求导(backward)方便的特点; 图也可以存储计算过程中的一些数据(class)</p><p>每个节点都有 正向传输(forward) 和 反向传输(backward)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 乘法层</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MulLayer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = <span class="literal">None</span></span><br><span class="line">        self.y = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">        out = x * y</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self, dout)</span>:</span></span><br><span class="line">        dx = dout * self.y <span class="comment"># 翻转x和y</span></span><br><span class="line">        dy = dout * self.x  <span class="comment"># 导数是 对方乘数</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> dx, dy</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加法层</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddLayer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">        out = x + y</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backward</span><span class="params">(self, dout)</span>:</span></span><br><span class="line">        dx = dout * <span class="number">1</span>       <span class="comment"># 导数是 1</span></span><br><span class="line">        dy = dout * <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dx, dy</span><br></pre></td></tr></table></figure><ul><li>我们将 Y = X * W + B 称作仿射变换, 对应步骤称为仿射变换层.(Affine)</li><li>仿射层中参与运算的都是矩阵</li></ul><p>误差反向传播法求梯度 比数值法效率更高.  但我们常用 数值法 计算梯度, 对结果进行比较. 从而实现梯度确认.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算 数值微分求出的梯度和误差反向传播法求出的梯度的误差</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br><span class="line">os.chdir(<span class="string">"E:\\Temp\\deep-learning-from-scratch-master\\ch05"</span>)</span><br><span class="line">sys.path.append(os.pardir)  <span class="comment"># 为了导入父目录的文件而进行的设定</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> dataset.mnist <span class="keyword">import</span> load_mnist</span><br><span class="line"><span class="keyword">from</span> two_layer_net <span class="keyword">import</span> TwoLayerNet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据</span></span><br><span class="line">(x_train, t_train), (x_test, t_test) = load_mnist(normalize=<span class="literal">True</span>, one_hot_label=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">network = TwoLayerNet(input_size=<span class="number">784</span>, hidden_size=<span class="number">50</span>, output_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">x_batch = x_train[:<span class="number">3</span>]</span><br><span class="line">t_batch = t_train[:<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">grad_numerical = network.numerical_gradient(x_batch, t_batch)</span><br><span class="line">grad_backprop = network.gradient(x_batch, t_batch)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> grad_numerical.keys():</span><br><span class="line">    diff = np.average( np.abs(grad_backprop[key] - grad_numerical[key]) )</span><br><span class="line">    print(key + <span class="string">":"</span> + str(diff))</span><br></pre></td></tr></table></figure><pre><code>W1:4.5174184319697615e-10b1:2.397918682756723e-09W2:4.725159762929652e-09b2:1.398749418138334e-07</code></pre><p><strong>第五章所学</strong></p><ul><li>通过使用计算图，可以直观地把握计算过程。</li><li>计算图的节点是由局部计算构成的。局部计算构成全局计算。</li><li>计算图的正向传播进行一般的计算。通过计算图的反向传播，可以计算各个节点的导数。</li><li>通过将神经网络的组成元素实现为层，可以高效地计算梯度（反向传播法）。</li><li>通过比较数值微分和误差反向传播法的结果，可以确认误差反向传播法的实现是否正确（梯度确认）。</li></ul><h2 id="第6章"><a class="header-anchor" href="#第6章"></a>第6章</h2><p>本章所学的内容</p><ul><li>参数的更新方法，除了 SGD 之外，还有Momentum、AdaGrad、Adam等方法。</li><li>权重初始值的赋值方法对进行正确的学习非常重要。</li><li>作为权重初始值，Xavier 初始值、He初始值等比较有效。<br>-通过使用 Batch Normalization，可以加速学习，并且对初始值变得健壮。</li><li>抑制过拟合的正则化技术有权值衰减、Dropout等。</li><li>逐渐缩小“好值”存在的范围是搜索超参数的一个有效方法。</li></ul><h2 id="第7章"><a class="header-anchor" href="#第7章"></a>第7章</h2><p>本章所学的内容</p><ul><li>CNN在此前的全连接层的网络中新增了卷积层和池化层。</li><li>使用im2col 函数可以简单、高效地实现卷积层和池化层。</li><li>通过CNN的可视化，可知随着层次变深，提取的信息愈加高级。</li><li>LeNet和AlexNet是CNN的代表性网络。</li><li>在深度学习的发展中，大数据和GPU做出了很大的贡献。</li></ul><h2 id="第8章"><a class="header-anchor" href="#第8章"></a>第8章</h2><p>本章所学的内容</p><ul><li>对于大多数的问题，都可以期待通过加深网络来提高性能。</li><li>在最近的图像识别大赛ILSVRC中，基于深度学习的方法独占鳌头，使用的网络也在深化。</li><li>VGG、GoogLeNet、ResNet等是几个著名的网络。</li><li>基于GPU、分布式学习、位数精度的缩减，可以实现深度学习的高速化。</li><li>深度学习（神经网络）不仅可以用于物体识别，还可以用于物体检测、图像分割。</li><li>深度学习的应用包括图像标题的生成、图像的生成、强化学习等。最近，深度学习在自动驾驶上的应用也备受期待。</li></ul><p><em><strong>我都学完了, 后面的草率一点, 2016年的书, 很棒的入门</strong></em></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pdf添加页码</title>
      <link href="/2020/06/21/pdf%E6%B7%BB%E5%8A%A0%E9%A1%B5%E7%A0%81/"/>
      <url>/2020/06/21/pdf%E6%B7%BB%E5%8A%A0%E9%A1%B5%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="给PDF文件添加页码"><a class="header-anchor" href="#给PDF文件添加页码"></a>给PDF文件添加页码</h1><p>有些扫描的, 或者本身没有添加页码的pdf文件, 很长, 也没有书签目录可以跳转, 尽管很多pdf编辑器可以手动添加目录, 但仍然不符合效率的原则.</p><p>当然, 我们可以写程序实现, 在需要编辑的pdf样本比较少的情况下, 小工具也可以很有用.</p><p><strong><a href="https://www.jianshu.com/p/9683e7094871" target="_blank" rel="noopener">这篇博客</a>给我提供了很大的帮助.</strong></p><ol><li><p>下载&quot;老马&quot;自己写的<strong>PdgCntEditor</strong></p><p>博客地址:<br><a href="https://www.cnblogs.com/stronghorse/" target="_blank" rel="noopener">https://www.cnblogs.com/stronghorse/</a></p><p>最新软件下载地址：</p><p>链接：<a href="https://pan.baidu.com/s/1BC0JTOACnfePv8LokD5GCg" target="_blank" rel="noopener">https://pan.baidu.com/s/1BC0JTOACnfePv8LokD5GCg</a><br>提取码：tyor</p><p>English version:</p><p><a href="http://www.mediafire.com/folder/f0z2hexqdnr9a/Software" target="_blank" rel="noopener">http://www.mediafire.com/folder/f0z2hexqdnr9a/Software</a></p></li><li><p>从京东, 亚马逊, 图书内容等等渠道, 获得文件目录.<br>最好复制到excel里面, 分两栏, 序号标题一栏, 页码一栏(两栏之间天然用制表符Tab分开)</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/pdf%E6%B7%BB%E5%8A%A0%E9%A1%B5%E7%A0%81/1.png" alt=""></p><ol start="3"><li>运行PdgCntEditor.exe, 打开 ***.pdf, 将目录粘贴到空白处, 选中目录.<ul><li>自动缩进</li><li>设定基准页, 即目录中P1对应的实际PDF页数.</li><li>保存文件</li></ul></li></ol><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/pdf%E6%B7%BB%E5%8A%A0%E9%A1%B5%E7%A0%81/2.png" alt=""></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蒲宇琦考研成绩排名估算</title>
      <link href="/2020/05/10/%E8%92%B2%E5%AE%87%E7%90%A6%E8%80%83%E7%A0%94%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E4%BC%B0%E7%AE%97/"/>
      <url>/2020/05/10/%E8%92%B2%E5%AE%87%E7%90%A6%E8%80%83%E7%A0%94%E6%88%90%E7%BB%A9%E6%8E%92%E5%90%8D%E4%BC%B0%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="研究蒲宇琦成绩排名-结合研究生考试的成绩分布情况"><a class="header-anchor" href="#研究蒲宇琦成绩排名-结合研究生考试的成绩分布情况"></a>研究蒲宇琦成绩排名_结合研究生考试的成绩分布情况</h2><p>尝试应用一两个具体的例子</p><ul><li>中南财经政法大学的例子表明, 样本太少异常难受</li><li>江苏2018年高考的例子表明, 十分接近正态分布(因为缺乏完整数据, 难以直接估算)</li><li>调整蒲宇琦西南交大的数据, 还是较为准确地刻画了整个考生的成绩分布.</li></ul><p>结果:<br>分数线 349.6126342475794<br>均分 317.4427612973726<br>他的成绩 356.62492204051085<br>成绩排名 130.84695647606708</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">sample = np.random.normal(loc=<span class="number">10</span> ,size=<span class="number">1000</span>)   </span><br><span class="line"></span><br><span class="line">plt.hist(sample)    <span class="comment"># 用正态分布练一下 PDF 图像</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/pyq/output_1_0.svg" alt="svg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">sample = np.random.normal(loc=<span class="number">10</span> ,size=<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">hist, bin_edges = np.histogram(sample)      <span class="comment"># CDF 画法</span></span><br><span class="line">cdf = np.cumsum(hist)</span><br><span class="line">plt.plot(cdf)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/pyq/output_2_0.svg" alt="svg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""网上找了一个例子, 太难了, 样本数量过小"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中南财经政法大学 统计与数学学院2020年硕士研究生入学考试初试成绩分数段公告</span></span><br><span class="line"><span class="comment"># http://tsxy.zuel.edu.cn/2020/0417/c4801a240926/page.htm</span></span><br><span class="line"></span><br><span class="line">rawZN = <span class="string">"""['400分以上,395分以上390分以上385分以上380分以上375分以上370分以上365分以上360分以上355分以上350分以上345分以上']</span></span><br><span class="line"><span class="string">[[245101515171921262933</span></span><br><span class="line"><span class="string">2466812141923293946</span></span><br><span class="line"><span class="string">28385573103135167209243275311344]]"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式上进行一些处理</span></span><br><span class="line">rawZN = rawZN.replace(<span class="string">"\t"</span>, <span class="string">","</span>)                </span><br><span class="line">titleZN, dataZN = rawZN.split(<span class="string">"\n"</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">titleZN = titleZN.replace(<span class="string">","</span>, <span class="string">"\',\'"</span>)</span><br><span class="line">dataZN = dataZN.replace(<span class="string">"\n"</span>, <span class="string">"],["</span>)</span><br><span class="line"></span><br><span class="line">titleZN = eval(titleZN)</span><br><span class="line">dataZN =  eval(dataZN)</span><br><span class="line"></span><br><span class="line">dataZN = np.array(dataZN)</span><br><span class="line">print(dataZN)</span><br><span class="line"></span><br><span class="line">pureZN = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> dataZN:</span><br><span class="line">    i[<span class="number">1</span>:] -= i[:<span class="number">-1</span>].copy()</span><br><span class="line">    pureZN.append(i)</span><br><span class="line"></span><br><span class="line">pureZN = np.array(pureZN)</span><br><span class="line">print(pureZN)</span><br><span class="line"></span><br><span class="line">t = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pureZN:</span><br><span class="line">    plt.subplot(eval(<span class="string">'31'</span>+str(t)))</span><br><span class="line">    t += <span class="number">1</span></span><br><span class="line">    <span class="comment"># hist, bin_edges = np.histogram(i)</span></span><br><span class="line">    plt.plot(i)</span><br><span class="line">    plt.xticks(range(len(titleZN))[::<span class="number">3</span>], titleZN[::<span class="number">3</span>])  <span class="comment">## 可以设置坐标字</span></span><br><span class="line"><span class="comment"># hist, bin_edges = np.histogram(sample)</span></span><br><span class="line"><span class="comment"># cdf = np.cumsum(hist)</span></span><br><span class="line"><span class="comment"># plt.plot(cdf)</span></span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>[[  2   4   5  10  15  15  17  19  21  26  29  33] [  2   4   6   6   8  12  14  19  23  29  39  46] [ 28  38  55  73 103 135 167 209 243 275 311 344]][[ 2  2  1  5  5  0  2  2  2  5  3  4] [ 2  2  2  0  2  4  2  5  4  6 10  7] [28 10 17 18 30 32 32 42 34 32 36 33]]</code></pre><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/pyq/output_3_1.svg" alt="svg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 江苏：2018年普通高考文理科逐分段统计表 理科部分</span></span><br><span class="line"><span class="comment"># https://gaokao.chsi.com.cn/gkxx/zc/ss/201806/20180624/1699971659.html</span></span><br><span class="line"></span><br><span class="line">rawJS = <span class="string">"""[106,129,153,176,206,244,294,349,403,481,554,632,729,824,941,1073,1212,1374,1532,1701,1905,2155,2410,2673,2977,3300,3640,4011,4417,4851,5337,5826,6386,6970,7558,8196,8894,9624,10397,11188,12010,12927,13878,14865,15908,16949,18069,19224,20426,21662,22956,24259,25683,27082,28578,30126,31696,33251,34844,36532,38197,39968,41732,43537,45377,47223,49066,50899,52843,54809,56818,58853,60827,62874,64881,66887,68883,70894,72878,74876,76939,78846,80785,82746,84717,86691,88640,90569,92470,94303,96130,97984,99833,101621,103400,105171,106842,108538,110109,111659,113259,114858,116332,117807,119232,120592,121985,123348,124643,125898,127159,128392,129577,130768,131884,133003,134133,135180,136221,137206,138195,139160,140082,141006,141853,142718,143558,144384,145131,145856,146562,147204,147854,148486,149146,149786,150353]"""</span></span><br><span class="line">titleJS = <span class="string">"""['411','410','409','408','407','406','405','404','403','402','401','400','399','398','397','396','395','394','393','392','391','390','389','388','387','386','385','384','383','382','381','380','379','378','377','376','375','374','373','372','371','370','369','368','367','366','365','364','363','362','361','360','359','358','357','356','355','354','353','352','351','350','349','348','347','346','345','344','343','342','341','340','339','338','337','336','335','334','333','332','331','330','329','328','327','326','325','324','323','322','321','320','319','318','317','316','315','314','313','312','311','310','309','308','307','306','305','304','303','302','301','300','299','298','297','296','295','294','293','292','291','290','289','288','287','286','285','284','283','282','281','280','279','278','277','276','275']"""</span></span><br><span class="line">rawJS = np.array(eval(rawJS))</span><br><span class="line">titleJS = eval(titleJS)</span><br><span class="line">titleJS = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> titleJS]</span><br><span class="line"></span><br><span class="line">total = rawJS[<span class="number">-1</span>]       <span class="comment"># 总人数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rawJS[<span class="number">1</span>:] -= rawJS[:<span class="number">-1</span>].copy()</span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">1</span>)</span><br><span class="line">plt.plot(rawJS/total)           <span class="comment"># 画PDF</span></span><br><span class="line">plt.xticks(range(len(titleJS))[::<span class="number">5</span>], titleJS[::<span class="number">5</span>])  <span class="comment">## 可以设置坐标字</span></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sample = np.random.choice(titleJS, p=rawJS/total,size=<span class="number">10000</span>)</span><br><span class="line">meanJS = sample.mean()      <span class="comment"># 正态分布拟合</span></span><br><span class="line">delta = sample.std()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scipy.stats</span><br><span class="line"></span><br><span class="line">p = scipy.stats.norm.pdf(titleJS, meanJS, delta)  <span class="comment"># 返回N(mu,sigma^2)的概率密度函数在 x 处的值</span></span><br><span class="line">plt.plot(p)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.figure(<span class="number">2</span>)</span><br><span class="line">cdfJS = rawJS.cumsum()      <span class="comment"># 画CDF</span></span><br><span class="line">plt.xticks(range(len(titleJS))[::<span class="number">5</span>], titleJS[::<span class="number">5</span>])  <span class="comment">## 可以设置坐标字</span></span><br><span class="line">plt.plot(cdfJS/total)</span><br><span class="line"><span class="comment"># plt.show()</span></span><br><span class="line">titleJS.sort()</span><br><span class="line">c = scipy.stats.norm.cdf(titleJS, meanJS, delta)</span><br><span class="line">plt.plot(c)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/pyq/output_4_0.svg" alt="svg"></p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/pyq/output_4_1.svg" alt="svg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> scipy.stats</span><br><span class="line"></span><br><span class="line">num = <span class="number">1560</span></span><br><span class="line">stopR = <span class="number">204</span></span><br><span class="line">stopPointR = <span class="number">349</span> </span><br><span class="line">puR = <span class="number">356</span></span><br><span class="line">mean = <span class="number">318</span></span><br><span class="line">std = <span class="number">28</span></span><br><span class="line"></span><br><span class="line">sampleRan = np.random.normal(mean, std, <span class="number">155400</span>)</span><br><span class="line">sample = np.sort(sampleRan) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算分数线</span></span><br><span class="line">stop = np.percentile(sample, <span class="number">100</span><span class="number">-100</span>*stopR/num)   <span class="comment"># percentile 返回百分位数对应的值</span></span><br><span class="line">print(<span class="string">'估计分数线'</span>, stop)</span><br><span class="line"><span class="comment"># 换算成蒲宇琦的分数</span></span><br><span class="line">meanR = stopPointR/stop*mean</span><br><span class="line">print(<span class="string">"实际均分"</span>,meanR) <span class="comment"># 实际 平均分</span></span><br><span class="line">pu = puR*mean/meanR</span><br><span class="line">print(pu)</span><br><span class="line"></span><br><span class="line">rank = scipy.stats.norm.cdf(pu, mean, std)</span><br><span class="line">print((<span class="number">1</span>-rank)*num)</span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">'font.sans-serif'</span>]=[<span class="string">'SimHei'</span>] <span class="comment">#用来正常显示中文标签</span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br><span class="line"></span><br><span class="line">L = np.linspace(<span class="number">200</span>, <span class="number">430</span>, num=<span class="number">500</span>)</span><br><span class="line">Lpdf = scipy.stats.norm.pdf(L, meanR, std)</span><br><span class="line">plt.subplot(<span class="number">211</span>)</span><br><span class="line">plt.plot(L,Lpdf)</span><br><span class="line">plt.title(<span class="string">"成绩分布概率密度"</span>)</span><br><span class="line">plt.xlabel(<span class="string">"成绩"</span>)  <span class="comment"># x轴上的名字</span></span><br><span class="line">plt.ylabel(<span class="string">"概率密度"</span>)  <span class="comment"># y轴上的名字</span></span><br><span class="line"><span class="comment"># 画分数线</span></span><br><span class="line">point1 = [stop,scipy.stats.norm.pdf(stop, meanR, std)]</span><br><span class="line">plt.plot([point1[<span class="number">0</span>],point1[<span class="number">0</span>]],[point1[<span class="number">1</span>],<span class="number">0</span>],<span class="string">'r--'</span>,linewidth = <span class="number">2</span>)</span><br><span class="line">plt.annotate(<span class="string">'分数线'</span>, xy=point1)</span><br><span class="line"><span class="comment"># 画蒲宇琦</span></span><br><span class="line">point1 = [puR,scipy.stats.norm.pdf(pu, meanR, std)]</span><br><span class="line">plt.plot([point1[<span class="number">0</span>],point1[<span class="number">0</span>]],[point1[<span class="number">1</span>],<span class="number">0</span>],<span class="string">'g--'</span>,linewidth = <span class="number">1.5</span>)</span><br><span class="line">plt.annotate(<span class="string">'pyq'</span>, xy=point1)</span><br><span class="line">plt.xlim((L[<span class="number">0</span>],L[<span class="number">-1</span>]))</span><br><span class="line">plt.ylim((<span class="number">0</span>,<span class="number">0.015</span>))</span><br><span class="line">plt.xticks([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> L[::<span class="number">20</span>]], [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> L[::<span class="number">20</span>]])  <span class="comment">## 可以设置坐标字</span></span><br><span class="line"></span><br><span class="line">Lcdf = scipy.stats.norm.cdf(L, meanR, std)</span><br><span class="line">plt.subplot(<span class="number">212</span>)</span><br><span class="line">plt.plot(L,Lcdf*num)</span><br><span class="line">plt.title(<span class="string">"成绩排名(累计分布)"</span>)</span><br><span class="line">plt.xticks([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> L[::<span class="number">20</span>]], [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> L[::<span class="number">20</span>]])  <span class="comment">## 可以设置坐标字</span></span><br><span class="line">plt.yticks(range(num,<span class="number">0</span>,<span class="number">-1</span>)[::<span class="number">100</span>], [i <span class="keyword">for</span> i <span class="keyword">in</span> range(num)[::<span class="number">100</span>]])</span><br><span class="line">plt.xlabel(<span class="string">"成绩"</span>)  <span class="comment"># x轴上的名字</span></span><br><span class="line">plt.ylabel(<span class="string">"排名"</span>)  <span class="comment"># y轴上的名字</span></span><br><span class="line"><span class="comment"># 画分数线</span></span><br><span class="line">point1 = [stop,scipy.stats.norm.cdf(stop, meanR, std)*num]</span><br><span class="line">plt.plot([point1[<span class="number">0</span>],point1[<span class="number">0</span>],L[<span class="number">0</span>]],[<span class="number">0</span>,point1[<span class="number">1</span>],point1[<span class="number">1</span>]],<span class="string">'r--'</span>,linewidth = <span class="number">2</span>)</span><br><span class="line">plt.annotate(<span class="string">'分数线'</span>, xy=[point1[<span class="number">0</span>]<span class="number">-4</span>, point1[<span class="number">1</span>]<span class="number">-80</span>])</span><br><span class="line"><span class="comment"># 画蒲宇琦</span></span><br><span class="line">point1 = [puR,scipy.stats.norm.cdf(pu, meanR, std)*num]</span><br><span class="line">plt.plot([point1[<span class="number">0</span>],point1[<span class="number">0</span>],L[<span class="number">0</span>]],[<span class="number">0</span>,point1[<span class="number">1</span>],point1[<span class="number">1</span>]],<span class="string">'g--'</span>,linewidth = <span class="number">1.5</span>)</span><br><span class="line">plt.annotate(<span class="string">'pyq'</span>, xy=[point1[<span class="number">0</span>]+<span class="number">2</span>, point1[<span class="number">1</span>]<span class="number">-20</span>])</span><br><span class="line"></span><br><span class="line">plt.xlim((L[<span class="number">0</span>],L[<span class="number">-1</span>]))</span><br><span class="line">plt.ylim((<span class="number">0</span>,<span class="number">1.05</span>*num))</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><pre><code>估计分数线 349.6126342475794实际均分 317.4427612973726356.62492204051085130.84695647606708</code></pre><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/pyq/output_5_1.svg" alt="svg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客添加Latex公式</title>
      <link href="/2020/04/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Latex%E5%85%AC%E5%BC%8F/"/>
      <url>/2020/04/02/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Latex%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>注意点:</p><ul><li><p><a href="https://chenpt.cc/%E4%BD%BF%E7%94%A8mathjax%E6%9D%A5%E4%B9%A6%E5%86%99%E5%85%AC%E5%BC%8F/" target="_blank" rel="noopener">链接</a>对于使用https协议的静态网站来说，所使用的cdn地址需要显式地添加 https: //，修改config文件的cdn的地址之后，重新部署，发现一切正常<br><br><br><br></p></li><li><p><a href="https://www.jianshu.com/p/e8d433a2c5b7" target="_blank" rel="noopener">链接</a> 下文<br><html lang="en"><head></head><body class=""><br><p>在 hexo 中，你会发现我们不能用 <code>Latex</code> 语法来书写数学公式，这对于书写学术博客来说是很大的不便，因为我们会经常碰到很多的数学公式推导，但是我们可以通过安装第三方库来解决这一问题。</p><br><h2>第一步： 使用Kramed代替 Marked</h2><br><p><code>hexo</code> 默认的渲染引擎是 <code>marked</code>，但是 <code>marked</code> 不支持 <code>mathjax</code>。 <code>kramed</code> 是在 <code>marked</code> 的基础上进行修改。我们在工程目录下执行以下命令来安装 <code>kramed</code>.</p><br><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-undefined"><code class="  language-undefined">npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div><br><p>然后，更改&lt;your-project-dir&gt;/node_modules/hexo-renderer-kramed/lib/renderer.js，更改：</p><br><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-javascript"><code class="javascript  language-javascript"><span class="token comment">// Change inline math rule</span><span class="token keyword">function</span> <span class="token function">formatText</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// Fit kramed's rule: $$ + \1 + $$</span>  <span class="token keyword">return</span> text<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/`\$(.*?)\$`/g</span><span class="token punctuation">,</span> <span class="token string">'$$$$$1$$$$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div><br><p>为：</p><br><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-javascript"><code class="Javascript  language-javascript"><span class="token comment">// Change inline math rule</span><span class="token keyword">function</span> <span class="token function">formatText</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> text<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div><br><h2>第二步: 停止使用 hexo-math</h2><br><p>首先，如果你已经安装 <code>hexo-math</code>, 请卸载它：</p><br><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-nodejs"><code class="Nodejs  language-nodejs">npm uninstall hexo-math --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><p>然后安装 <a href="https://link.jianshu.com/?t=https://github.com/phoenixcw/hexo-renderer-mathjax" target="_blank" rel="nofollow">hexo-renderer-mathjax</a> 包：</p><br><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-npm"><code class="npm  language-npm">npm install hexo-renderer-mathjax --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div><br><h2>第三步: 更新 Mathjax 的 CDN 链接</h2><br><p>首先，打开&lt;path-to-your-project&gt;/node_modules/hexo-renderer-mathjax/mathjax.html</p><br><p>然后，把<code>&lt;script&gt;</code>更改为：</p><br><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-xml"><code class="  language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script&lt;/span&gt; <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class=“token punctuation">"</span><a href="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML" target="_blank" rel="noopener">https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-MML-AM_CHTML</a><span class=“token punctuation">"</span>&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script&lt;/span&gt;<span class="token punctuation">&gt;</span>&lt;/span&gt;</p></li></ul><p><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></p><p><h2>第四步: 更改默认转义规则</h2></p><p><p>因为 <code>hexo</code> 默认的转义规则会将一些字符进行转义，比如 <code>_</code> 转为 <code>&lt;em&gt;</code>, 所以我们需要对默认的规则进行修改.<br>首先， 打开&lt;path-to-your-project/node_modules/kramed/lib/rules、inline.js,</p></p><p><p>然后，把:</p></p><p><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-javascript"><code class="Javascript  language-javascript">escape<span class="token punctuation">:</span> <span class="token regex">/^\\([\\`*{}\[\]()#$+\-.!_&gt;])/</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><p><p>更改为:</p></p><p><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-javascript"><code class="Javascript  language-javascript">escape<span class="token punctuation">:</span> <span class="token regex">/^\\([`*\[\]()# +\-.!_&gt;])/</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><p><p>把</p></p><p><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-javascript"><code class="Javascript  language-javascript">em<span class="token punctuation">:</span> <span class="token regex">/^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><p><p>更改为:</p></p><p><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-javascript"><code class="Javascript  language-javascript">em<span class="token punctuation">:</span> <span class="token regex">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></p><p><h2>第五步: 开启mathjax</h2></p><p><p>在主题 <code>_config.yml</code> 中开启 Mathjax， 找到 <code>mathjax</code> 字段添加如下代码：</p></p><p><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-yml"><code class="yml  language-yml"><span class="token key atrule">mathjax</span><span class="token punctuation">:</span>    <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></p><p><p>这一步可选，在博客中开启 <code>Mathjax</code>，， 添加以下内容：</p></p><p><div class="_2Uzcx_"><button class="VJbwyy" type="button" aria-label="复制代码"><i aria-label="icon: copy" class="anticon anticon-copy"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="copy" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M832 64H296c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h496v688c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8V96c0-17.7-14.3-32-32-32zM704 192H192c-17.7 0-32 14.3-32 32v530.7c0 8.5 3.4 16.6 9.4 22.6l173.3 173.3c2.2 2.2 4.7 4 7.4 5.5v1.9h4.2c3.5 1.3 7.2 2 11 2H704c17.7 0 32-14.3 32-32V224c0-17.7-14.3-32-32-32zM350 856.2L263.9 770H350v86.2zM664 888H414V746c0-22.1-17.9-40-40-40H232V264h432v624z"></path></svg></i></button><pre class="line-numbers  language-markdown"><code class="Markdown  language-markdown"><span class="token hr punctuation">---</span>title: Testing Mathjax with Hexocategory: Uncategorizeddate: 2017/05/03<span class="token title important">mathjax: true<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></p><p><p>通过以上步骤，我们就可以在 <code>hexo</code> 中使用 <code>Mathjax</code> 来书写数学公式。</p></p><iframe id="google_esf" name="google_esf" src="https://googleads.g.doubleclick.net/pagead/html/r20200331/r20190131/zrt_lookup.html#" data-ad-client="ca-pub-3077285224019295" style="display: none;"></iframe>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SVG</title>
      <link href="/2020/04/02/SVG/"/>
      <url>/2020/04/02/SVG/</url>
      
        <content type="html"><![CDATA[<h1 id="SVG-学习"><a href="#SVG-学习" class="headerlink" title="SVG 学习"></a>SVG 学习</h1><p>主要教程网站<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial" target="_blank" rel="noopener">mozilla developer</a><br>主要记录我的一些草稿和学习内容.<br><br>SVG的主要<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG" target="_blank" rel="noopener">参考文档</a></p><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>SVG是一种XML语言的，和XHTML很像，它可以用来绘制矢量图形，例如右面展示的图形。SVG可以通过<u>定义必要的线和形状</u>来创建一个图形，也可以<u>修改已有的位图</u>，或者将这两种方式<u>结合起来</u>创建图形。图形和其组成部分可以形变（be transformed）、合成、或者通过滤镜完全改变外观。</p><p>所有的现代浏览器都支持SVG, 但是各种SVG浏览器是有差异的, 可能会出现显示方面的问题. 最接近的“完整版”SVG版本是1.1版, SVG 2.0正在制定当中.</p><h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><p>下面是一段<code>xml</code>代码, 文件名是 <code>**.svg</code> , 但也可以使用 <code>**.xml</code> , 在浏览器中打开都会显示svg图片.<br><em>在服务器支持gzip时, 也可以用 <code>**.svgz</code> 命名并压缩大型SVG文件</em><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"2"</span>    </span></span><br><span class="line"><span class="tag">     <span class="attr">baseProfile</span>=<span class="string">"full"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">height</span>=<span class="string">"200"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">fill</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"150"</span> <span class="attr">cy</span>=<span class="string">"100"</span> <span class="attr">r</span>=<span class="string">"80"</span> <span class="attr">fill</span>=<span class="string">"green"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"150"</span> <span class="attr">y</span>=<span class="string">"125"</span> <span class="attr">font-size</span>=<span class="string">"60"</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">fill</span>=<span class="string">"white"</span>&gt;</span>汉字<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/svg-1.svg" alt=""></p><p>服务器配置错误是svg文件出错的常见原因, 容易出现文本和乱码, 一定要努力保证在该环节没有问题.</p><h2 id="坐标定位"><a href="#坐标定位" class="headerlink" title="坐标定位"></a>坐标定位</h2><p>SVG采用常见的Canvas坐标定位, 从高到低从左到右, 单位距离为1px</p><center><img src="https://media.prod.mdn.mozit.cloud/attachments/2012/07/09/224/70658d72d2408295cdfba55e6cd5fcc8/Canvas_default_grid.png" width = 150 > </center><p>定义一个<code>100*100</code>的矩形<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"2"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">baseProfile</span>=<span class="string">"full"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><br>就会出现一个大黑块<br><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/svg-2.svg" alt=""></p><h3 id="像素大小"><a href="#像素大小" class="headerlink" title="像素大小"></a>像素大小</h3><p>通常 <code>1px</code> 便是用户屏幕的1个像素, 和CSS一样, SVG也能定义相对大小和绝对大小.<br>在SVG根元素中, 可以如下定义<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 100 100"</span> &gt;</span></span><br></pre></td></tr></table></figure><br>定义画布尺寸为<code>50*50px</code>, 显示的坐标范围<code>100*100px</code>, 实现了缩小一半的效果.</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/svg-3.svg" alt=""></p><p>和Qt类似, 用户设备和单位像素的映射关系叫<u><strong><em>用户坐标系统</em></strong></u>, <code>缩放、旋转、倾斜、翻转</code>等功能均可实现. </p><h2 id="基本形状"><a href="#基本形状" class="headerlink" title="基本形状"></a>基本形状</h2><p>下面是一些常见的基本形状, 我们可以直接运用他们或者用他们构建出更复杂的形状.</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/svg-4.svg" alt=""></p><p>分别是 <code>矩形, 圆角矩形, 圆, 椭圆, 直线, 折线, 多边形, 曲线</code></p><h3 id="矩形-圆角矩形"><a href="#矩形-圆角矩形" class="headerlink" title="矩形 圆角矩形"></a>矩形 圆角矩形</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"60"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">rx</span>=<span class="string">"10"</span> <span class="attr">ry</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"30"</span> <span class="attr">height</span>=<span class="string">"30"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>参数: <code>左上角的x,y坐标 长度 宽度 rx ry圆角半径</code></p><h3 id="圆-椭圆"><a href="#圆-椭圆" class="headerlink" title="圆 椭圆"></a>圆 椭圆</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"25"</span> <span class="attr">cy</span>=<span class="string">"75"</span> <span class="attr">r</span>=<span class="string">"20"</span> <span class="attr">stroke</span>=<span class="string">"red"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">cx</span>=<span class="string">"75"</span> <span class="attr">cy</span>=<span class="string">"75"</span> <span class="attr">rx</span>=<span class="string">"20"</span> <span class="attr">ry</span>=<span class="string">"5"</span> <span class="attr">stroke</span>=<span class="string">"red"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>参数: <code>cx cy中心坐标 r半径 rx x方向半轴 ry y方向半轴</code>  </p><ul><li>椭圆的参数还挺难受的, 不过中心点也还行</li></ul><h3 id="线-折线-多边形"><a href="#线-折线-多边形" class="headerlink" title="线 折线 多边形"></a>线 折线 多边形</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"10"</span> <span class="attr">x2</span>=<span class="string">"50"</span> <span class="attr">y1</span>=<span class="string">"110"</span> <span class="attr">y2</span>=<span class="string">"150"</span> <span class="attr">stroke</span>=<span class="string">"orange"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"60 110 65 120 70 115 75 130 80 125 85 140 90 135 95 150 100 145"</span> <span class="attr">stroke</span>=<span class="string">"orange"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">"50 160 55 180 70 180 60 190 65 205 50 195 35 205 40 190 30 180 45 180"</span> <span class="attr">stroke</span>=<span class="string">"green"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>参数: <code>x y起点终点坐标 points点集 xi yi</code></p><ul><li>多边形和折线不同的是, 多边形最终回到原点, 折线落在最后一点.</li><li>点集中每个数字用<strong>空白符、逗号、终止命令或者换行符</strong>分隔开, 每个点必须包含2个数字</li></ul><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M20,230 Q40,205 50,230 T90,230"</span> <span class="attr">fill</span>=<span class="string">"none"</span> <span class="attr">stroke</span>=<span class="string">"blue"</span> <span class="attr">stroke-width</span>=<span class="string">"5"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>参数: <code>d一个点集数列</code><br>路径几乎是万能的, 也是最常见的, 可以用来绘制一切线条.</p><h2 id="路径作图详解"><a href="#路径作图详解" class="headerlink" title="路径作图详解"></a>路径作图详解</h2><p>path元素的形状是通过属性<code>d</code>定义的，属性<code>d</code>的值是一个“命令+参数”的序列.</p><div class="table-container"><table><thead><tr><th style="text-align:center">缩写</th><th style="text-align:center">意义</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">当前点坐标($x_0$,$y_0$)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">M x y</td><td style="text-align:center">画笔移动到点($x,y$)</td><td style="text-align:center">移动不产生笔迹</td></tr><tr><td style="text-align:center">L x y</td><td style="text-align:center">画($x_0$,$y_0$)到点($x$,$y$)的线段</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">H x</td><td style="text-align:center">画($x_0$,$y_0$)到点(x,$y_0$)的水平线</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">V y</td><td style="text-align:center">画($x_0$,$y_0$)到点($x_0$,$y$)的垂直线</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">Z/z</td><td style="text-align:center">画($x_0$,$y_0$)到路径起点</td><td style="text-align:center">无参数,不区分大小写</td></tr><tr><td style="text-align:center">C $x_1$ $y_1$, $x_2$ $y_2$, $x$ $y$</td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/Bézier_3_big.gif" width="70%"> <br>三次贝塞尔曲线</td><td style="text-align:center">对应点 $P_0 $ $x_0,y_0$ / $P_1 $ $x_1,y_1$ / $P_2$ $x_2,y_2$ / $P_3$ $x,y$</td></tr><tr><td style="text-align:center">S  $x_2$ $y_2$, $x$ $y$</td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/ShortCut_Cubic_Bezier.png" width="36%">  <br> 简化的多个三次贝塞尔曲线</td><td style="text-align:center">每个曲线的$P_1$控制点和前一曲线$P_2$对称, 可省(蓝点)</td></tr><tr><td style="text-align:center">Q $x_1$ $y_1$, $x$ $y$</td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/Bézier_2_big.gif" width="70%"> <br> 二次贝塞尔曲线</td><td style="text-align:center">类似三次…</td></tr><tr><td style="text-align:center">T $x$ $y$</td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/Shortcut_Quadratic_Bezier.png" width="40%"> <br>简化的多个二次贝塞尔曲线</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">A $rx  ry x-axis-rotation$<br> $large-arc-flag sweep-flag x y$</td><td style="text-align:center"><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/SVGArcs_Flags.png" width="80%"><br>弧形命令</td><td style="text-align:center">$rx$ x方向半轴<br>$ry$ y方向半轴<br> $x-axis-rotation$ 关于x轴旋转角度<br>$large-arc-flag$ 0劣弧 1优弧<br>$sweep-flag$起点到终点 0逆时针弧 1顺时针弧<br>$x,y$终点</td></tr><tr><td style="text-align:center">m, l, v, h, z, c, s, q, t, a $dx_i  dy_i$</td><td style="text-align:center">小写是大写的简化, 只需要坐标变化量即可</td><td style="text-align:center">便捷但可读性不强</td></tr></tbody></table></div><ol><li><strong><em>每次使用path前, 都需要使用<code>M</code>移动到具体位置</em></strong></li><li><p>贝塞尔曲线广泛应用于计算机平滑曲线制作, 包括 .ttf 字体设计.<br>三次贝塞尔曲线参数形式: </p><script type="math/tex; mode=display">\mathbf{B}(t)=\mathbf{P}_{0}(1-t)^{3}+3 \mathbf{P}_{1} t(1-t)^{2}+3 \mathbf{P}_{2} t^{2}(1-t)+\mathbf{P}_{3} t^{3}, t \in[0,1]</script><p>贝塞尔曲线一般参数形式:  </p><script type="math/tex; mode=display">\mathbf{B}(t)=\sum_{i=0}^{n}\left(\begin{array}{l}n \\ i\end{array}\right) \mathbf{P}_{i}(1-t)^{n-i} t^{i}, t \in[0,1]</script></li><li><p>以知两点和椭圆长短半轴和旋转角度通常可以画<strong>四条弧</strong>, <code>A</code>中的参数就是为了确定是哪一条弧.</p><center><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/SVGArcs_XAxisRotation_with_grid_ellipses.png" width="30%"></center></li><li><p><code>z</code>只能在一个path命令中使用,即一笔画 </p></li></ol><h3 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h3><p>我用上面的所有path语法, 乱画一通, 如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.1" standalone="no"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"200px"</span> <span class="attr">height</span>=<span class="string">"200px"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M10 10 L 20 100"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M20 100 V 5 "</span> <span class="attr">stroke</span>=<span class="string">"green"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M20 5 H 60 "</span> <span class="attr">stroke</span>=<span class="string">"orange"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M60 5 C 30 20, 30 60, 65 100 "</span> <span class="attr">stroke</span>=<span class="string">"purple"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M65 100 S 100 140, 20 160 "</span> <span class="attr">stroke</span>=<span class="string">"red"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M20 160 Q 70 180, 80 160 "</span> <span class="attr">stroke</span>=<span class="string">"blue"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M80 160 T 130 170 "</span> <span class="attr">stroke</span>=<span class="string">"yellow"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M130 170 A 30 60 0 0 0 170 50 "</span> <span class="attr">stroke</span>=<span class="string">"brown"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M10 10 L170 50  "</span> <span class="attr">stroke</span>=<span class="string">"pink"</span> <span class="attr">fill</span>=<span class="string">"transparent"</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><br>结果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/svg-5.svg" alt=""></p><h2 id="Fill-和-Stroke-属性"><a href="#Fill-和-Stroke-属性" class="headerlink" title="Fill 和 Stroke 属性"></a>Fill 和 Stroke 属性</h2><p><code>fill</code>和<code>stroke</code>分别对应填充颜色和线条颜色. 此外还有很多他们的延申属性.</p><h3 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h3><p>画一个红边蓝底的矩形框<br><code>**-opacity</code>代表透明度设置, 颜色命名方案支持CSS颜色命名方案, 即颜色名（如red）、rgb值（如rgb(255,0,0)）、十六进制值、rgba值<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">stroke</span>=<span class="string">"rgb(255,0,0)"</span> <span class="attr">fill</span>=<span class="string">"#0000FF"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">fill-opacity</span>=<span class="string">"0.3"</span> <span class="attr">stroke-opacity</span>=<span class="string">"0.8"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="描边"><a href="#描边" class="headerlink" title="描边"></a>描边</h3><p><code>stroke-width</code> 线宽<br><code>stroke-linecap</code> 描边方式三种: 无描边, 方形描边, 圆角描边<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"20"</span> <span class="attr">x2</span>=<span class="string">"70"</span> <span class="attr">y1</span>=<span class="string">"80"</span> <span class="attr">y2</span>=<span class="string">"80"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">stroke-width</span>=<span class="string">"6"</span> <span class="attr">stroke-linecap</span>=<span class="string">"butt"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"20"</span> <span class="attr">x2</span>=<span class="string">"70"</span> <span class="attr">y1</span>=<span class="string">"100"</span> <span class="attr">y2</span>=<span class="string">"100"</span> <span class="attr">stroke</span>=<span class="string">"rgb(255,255,255)"</span> <span class="attr">stroke-width</span>=<span class="string">"8"</span> <span class="attr">stroke-linecap</span>=<span class="string">"square"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"20"</span> <span class="attr">x2</span>=<span class="string">"70"</span> <span class="attr">y1</span>=<span class="string">"120"</span> <span class="attr">y2</span>=<span class="string">"120"</span> <span class="attr">stroke</span>=<span class="string">"#FFFFFF"</span> <span class="attr">stroke-width</span>=<span class="string">"10"</span> <span class="attr">stroke-linecap</span>=<span class="string">"round"</span>/&gt;</span></span><br></pre></td></tr></table></figure><br>还有, <code>stroke-linejoin</code>属性控制折线折角风格<br>|  值   |     效果      |<br>| :——-: | :—————-: |<br>| miter |  尖角无修饰   |<br>| round |  圆角, 圆润   |<br>| bevel | 斜角,切去尖角 |</p><p><code>stroke-dasharray</code>用于画虚线, 接 $n_1,n_2…n_i$, 分别代表 $n_i$px 个填充或空白, 循环着色.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M 10 75 Q 50 10 100 75 T 190 75"</span> <span class="attr">stroke</span>=<span class="string">"black"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-dasharray</span>=<span class="string">"5,10,5"</span> <span class="attr">fill</span>=<span class="string">"none"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M 10 75 L 190 75"</span> <span class="attr">stroke</span>=<span class="string">"red"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">stroke-linecap</span>=<span class="string">"round"</span> <span class="attr">stroke-width</span>=<span class="string">"1"</span> <span class="attr">stroke-dasharray</span>=<span class="string">"5,5"</span> <span class="attr">fill</span>=<span class="string">"none"</span>/&gt;</span></span><br></pre></td></tr></table></figure><br>还有一些其他常见的修饰属性, 查阅<a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Attribute" target="_blank" rel="noopener">参考文档</a>.</p><h3 id="使用CSS"><a href="#使用CSS" class="headerlink" title="使用CSS"></a>使用CSS</h3><p>可以像在Html中一样使用CSS, 有些地方需要更换一下属性名字. 但是根据SVG的规范, <a href="https://www.w3.org/TR/SVG/propidx.html" target="_blank" rel="noopener">properties</a> 可以用CSS设置, <a href="https://www.w3.org/TR/SVG/attindex.html" target="_blank" rel="noopener">attributes</a>则不可以.</p><ol><li>直接在元素行间设置属性<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"180"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"180"</span> <span class="attr">style</span>=<span class="string">"stroke: red; stroke-width: 5; fill: blue;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li>设置样式段落<br>利用<code>&lt;style&gt;</code>设置一段样式段落, 在html里这样的<code>&lt;style&gt;</code>一般放在<code>&lt;head&gt;</code>里，<strong>在svg里<code>&lt;style&gt;</code>则放在<code>&lt;defs&gt;</code>标签里</strong><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span>&lt;![CDATA[</span><br><span class="line"><span class="css">    <span class="selector-id">#MyRect</span> &#123;</span></span><br><span class="line">      stroke: green;</span><br><span class="line">      stroke-width: 7;</span><br><span class="line">      fill: yellow;</span><br><span class="line">    &#125;</span><br><span class="line">  ]]&gt;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"180"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"180"</span> <span class="attr">id</span>=<span class="string">"MyRect"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol><li>定义外部样式表<br>要求符合<a href="http://www.w3.org/TR/xml-stylesheet/" target="_blank" rel="noopener">normal XML-stylesheet syntax</a>的规则. 可以在SVG中运用.<br><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/svg-7.svg" ><br>最好学一点CSS的知识, 获得更好的表现能力. 此外一些CSS可能在SVG中无法正常工作.</li></ol></li></ol><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><p>渐变是很多很酷的显示效果的基础功能, 一般有<code>线性渐变</code>和<code>径向渐变</code>.<br>我们一般将渐变定义在<code>&lt;defs&gt;</code>中, 并用一个<code>id属性</code>指代它们, 方便复用.   </p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/SVG_Linear_Gradient_Example.png"></p><p>线性渐变    </p><p><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/SVG_Radial_Gradient_Example.png"></p><p>径向渐变</p><p>较为复杂且费力, 这会是一个很有帮助的参考, 必要时学习并使用.<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Gradients" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Gradients</a></p><h2 id="图案"><a href="#图案" class="headerlink" title="图案"></a>图案</h2><p>图案可以之前学过的任意图形来实现对画布的填充.</p><p><strong>一个天蓝色矩形, 一个边长是前者一半大小的红色矩形, 一个半透明的圆</strong>, 组成了最基本的图案单元.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" standalone="no"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"750"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">version</span>=<span class="string">"1.1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"Gradient1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"5%"</span> <span class="attr">stop-color</span>=<span class="string">"white"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"95%"</span> <span class="attr">stop-color</span>=<span class="string">"blue"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"Gradient2"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">y2</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"5%"</span> <span class="attr">stop-color</span>=<span class="string">"red"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"95%"</span> <span class="attr">stop-color</span>=<span class="string">"orange"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">"Pattern"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">".25"</span> <span class="attr">height</span>=<span class="string">".25"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">fill</span>=<span class="string">"skyblue"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"25"</span> <span class="attr">height</span>=<span class="string">"25"</span> <span class="attr">fill</span>=<span class="string">"url(#Gradient2)"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"25"</span> <span class="attr">cy</span>=<span class="string">"25"</span> <span class="attr">r</span>=<span class="string">"20"</span> <span class="attr">fill</span>=<span class="string">"url(#Gradient1)"</span> <span class="attr">fill-opacity</span>=<span class="string">"0.5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">"Pattern1"</span> <span class="attr">width</span>=<span class="string">".25"</span> <span class="attr">height</span>=<span class="string">".25"</span> <span class="attr">patternContentUnits</span>=<span class="string">"objectBoundingBox"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">".25"</span> <span class="attr">height</span>=<span class="string">".25"</span> <span class="attr">fill</span>=<span class="string">"skyblue"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">".125"</span> <span class="attr">height</span>=<span class="string">".125"</span> <span class="attr">fill</span>=<span class="string">"url(#Gradient2)"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">".125"</span> <span class="attr">cy</span>=<span class="string">".125"</span> <span class="attr">r</span>=<span class="string">".1"</span> <span class="attr">fill</span>=<span class="string">"url(#Gradient1)"</span> <span class="attr">fill-opacity</span>=<span class="string">"0.5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pattern</span> <span class="attr">id</span>=<span class="string">"Pattern2"</span> <span class="attr">x</span>=<span class="string">"10"</span> <span class="attr">y</span>=<span class="string">"10"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">patternUnits</span>=<span class="string">"userSpaceOnUse"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">fill</span>=<span class="string">"skyblue"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"25"</span> <span class="attr">height</span>=<span class="string">"25"</span> <span class="attr">fill</span>=<span class="string">"url(#Gradient2)"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">"25"</span> <span class="attr">cy</span>=<span class="string">"25"</span> <span class="attr">r</span>=<span class="string">"20"</span> <span class="attr">fill</span>=<span class="string">"url(#Gradient1)"</span> <span class="attr">fill-opacity</span>=<span class="string">"0.5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">"url(#Pattern)"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">"url(#Pattern1)"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">x</span>=<span class="string">"250"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">fill</span>=<span class="string">"url(#Pattern2)"</span> <span class="attr">stroke</span>=<span class="string">"black"</span> <span class="attr">x</span>=<span class="string">"500"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/svg-8.svg" alt="">    </p><ol><li><p>Pattern<br>注意到<code>width=&quot;.25&quot; height=&quot;.25&quot;</code>, 4<em>4填充, <em>*不会拉伸</em></em>, 不够的地方是空白.</p></li><li><p>Pattern1<br>使用<code>patternContentUnits</code>, 默认值为<code>userSpaceOnUse</code>, 当设置其值为<code>objectBoundingBox</code>, 将不再使用Pattern本身的坐标而是使用画布的坐标系统, 需要计算宽和高的比例 <code>0~1</code>, 可以<strong>产生拉伸效果</strong>.</p></li><li><p>Pattern2<br>属性<code>patternUnits</code>, 默认值为<code>objectBoundingBox</code>, 当设置其值为<code>userSpaceOnUse</code>, 可以加入<code>x=&quot;10&quot; y=&quot;10&quot;</code>设置Pattern的偏移量, 也可以写成<code>x=&quot;1/30&quot; y=&quot;0.05&quot;</code>. 10/300=1/30 10/200=0.05. 可以<strong>产生平移效果</strong>.</p></li></ol><h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><p>SVG能显示一切字符, 拥有丰富的格式修饰</p><p><code>&lt;text&gt;</code>元素用来放文字, 可以指定<code>位置, 字号, 对齐, 填充, 描边</code><br><code>text-anchor</code>有start、middle、end或inherit几种值可选.<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">baseProfile</span>=<span class="string">"full"</span> <span class="attr">width</span>=<span class="string">"600"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">fill</span>=<span class="string">"red"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"example"</span> <span class="attr">x</span>=<span class="string">"350"</span> <span class="attr">y</span>=<span class="string">"50"</span> <span class="attr">font-size</span>=<span class="string">"30"</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">stroke</span>=<span class="string">"green"</span> <span class="attr">fill</span>=<span class="string">"yellow"</span>&gt;</span>₰汉字⅝English🌊π🦾</span><br><span class="line">        <span class="tag">&lt;<span class="name">tspan</span> <span class="attr">font-weight</span>=<span class="string">"bold"</span> <span class="attr">fill</span>=<span class="string">"red"</span>&gt;</span> bold and red<span class="tag">&lt;/<span class="name">tspan</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">"my_path"</span> <span class="attr">d</span>=<span class="string">"M 20,20 C 40,40 80,40 100,20"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textPath</span> <span class="attr">xmlns:xlink</span>=<span class="string">"http://www.w3.org/1999/xlink"</span> <span class="attr">xlink:href</span>=<span class="string">"#my_path"</span>&gt;</span>This text follows a curve.<span class="tag">&lt;/<span class="name">textPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/18wang/media/svg_blog/svg-9.svg" alt=""></p><p>常见的属性包括<code>font-family、font-style、font-weight、font-variant、font-stretch、font-size、font-size-adjust、kerning、letter-spacing、word-spacing和text-decoration</code>可以被设置为<strong>一个SVG属性</strong>或者成为<strong>一个CSS声明</strong></p><h3 id="一些特别的元素"><a href="#一些特别的元素" class="headerlink" title="一些特别的元素"></a>一些特别的元素</h3><ol><li><p><code>tspan</code><br>该元素用来标记大块文本的子部分，它必须是一个text元素或别的tspan元素的子元素。<br>它的一些属性可以重新定义文字位置, 旋转文字, 定义文本长度</p></li><li><p><code>tref</code><br>引用已经定义的文本，高效地把它复制到当前位置(貌似没用)</p></li><li><p><code>textPath</code><br>利用它的<code>xlink:href</code>属性取得一个任意路径，把字符对齐到路径</p></li></ol><h2 id="基础变形"><a href="#基础变形" class="headerlink" title="基础变形"></a>基础变形</h2><p>包括<code>平移, 旋转, 斜切, 缩放</code>等基本的图形变换.</p><h3 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h3><p><code>translate(dx,dy)</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"10"</span> <span class="attr">height</span>=<span class="string">"10"</span> <span class="attr">transform</span>=<span class="string">"translate(30,40)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h3><p><code>rotate(α)</code>按角度计算<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"20"</span> <span class="attr">y</span>=<span class="string">"20"</span> <span class="attr">width</span>=<span class="string">"20"</span> <span class="attr">height</span>=<span class="string">"20"</span> <span class="attr">transform</span>=<span class="string">"rotate(45)"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="斜切"><a href="#斜切" class="headerlink" title="斜切"></a>斜切</h3><p><code>skewX(α), skewY(θ)</code>角度确定元素斜切到哪里</p><h3 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h3><p><code>scale(x%, y%)</code>规定缩放的比例, 通常用小数, y轴的比例可以省略</p><h2 id="剪裁和遮罩"><a href="#剪裁和遮罩" class="headerlink" title="剪裁和遮罩"></a>剪裁和遮罩</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Clipping_and_masking" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Clipping_and_masking</a></p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>为了表达对小袁的思念, 在她面前做了这个图,<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">svg</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//W3C//DTD SVG 1.1//EN"</span> </span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">standalone</span>=<span class="string">"no"</span> <span class="attr">width</span>=<span class="string">"900"</span> <span class="attr">height</span>=<span class="string">"600"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>  <span class="attr">xmlns:xlink</span>= <span class="string">"http://www.w3.org/1999/xlink"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">fill</span>=<span class="string">"purple"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"450"</span> <span class="attr">y</span>=<span class="string">"100"</span> <span class="attr">font-size</span>=<span class="string">"40"</span> <span class="attr">text-anchor</span>=<span class="string">"middle"</span> <span class="attr">fill</span>=<span class="string">"white"</span>&gt;</span>我爱小袁<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">xlink:href</span>=<span class="string">"https://cdn.jsdelivr.net/gh/18wang/media/xy.jpg"</span> <span class="attr">x</span>=<span class="string">"250"</span> <span class="attr">y</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"400"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src="https://cdn.jsdelivr.net/gh/18wang/media/我爱小袁.svg" alt=""></p><p><a href="https://cdn.jsdelivr.net/gh/18wang/media/%E6%88%91%E7%88%B1%E5%B0%8F%E8%A2%81.svg" target="_blank" rel="noopener">点击这里, 图片可能加载不全</a></p><p>一个<code>xlink:href</code>属性引用了一个将呈现在SVG对象中的.jpg图像, 注意要包含<code>xmlns:xlink= &quot;http://www.w3.org/1999/xlink</code>才行, 否则会出错.<br>还有一些注意点:   </p><ul><li>如果你没有设置x属性或y属性，它们自动被设置为0。</li><li>如果你没有设置height属性或width属性，它们自动被设置为0。</li><li>如果width属性或height等于0，将不会呈现这个图像。</li><li>图片可以是来自文件或者网页(只要有网全世界都可以看到该图片)</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/22/hello-world/"/>
      <url>/2020/03/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a class="header-anchor" href="#Quick-Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a class="header-anchor" href="#Create-a-new-post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a class="header-anchor" href="#Run-server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a class="header-anchor" href="#Generate-static-files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a class="header-anchor" href="#Deploy-to-remote-sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
