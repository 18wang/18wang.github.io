{"meta":{"title":"18wang","subtitle":"","description":"","author":"Wang Xy","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"SVG","slug":"SVG","date":"2020-03-27T05:04:30.462Z","updated":"2020-04-02T04:44:45.521Z","comments":true,"path":"2020/03/27/SVG/","link":"","permalink":"http://yoursite.com/2020/03/27/SVG/","excerpt":"","text":"SVG 学习 主要教程网站mozilla developer 主要记录我的一些草稿和学习内容. SVG的主要参考文档 入门 SVG是一种XML语言的，和XHTML很像，它可以用来绘制矢量图形，例如右面展示的图形。SVG可以通过定义必要的线和形状来创建一个图形，也可以修改已有的位图，或者将这两种方式结合起来创建图形。图形和其组成部分可以形变（be transformed）、合成、或者通过滤镜完全改变外观。 所有的现代浏览器都支持SVG, 但是各种SVG浏览器是有差异的, 可能会出现显示方面的问题. 最接近的“完整版”SVG版本是1.1版, SVG 2.0正在制定当中. 一个简单的例子 下面是一段xml代码, 文件名是 **.svg , 但也可以使用 **.xml , 在浏览器中打开都会显示svg图片. 在服务器支持gzip时, 也可以用 **.svgz 命名并压缩大型SVG文件 123456789101112&lt;svg version=\"2\" baseProfile=\"full\" width=\"300\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\"&gt; &lt;rect width=\"100%\" height=\"100%\" fill=\"red\" /&gt; &lt;circle cx=\"150\" cy=\"100\" r=\"80\" fill=\"green\" /&gt; &lt;text x=\"150\" y=\"125\" font-size=\"60\" text-anchor=\"middle\" fill=\"white\"&gt;汉字&lt;/text&gt;&lt;/svg&gt; 服务器配置错误是svg文件出错的常见原因, 容易出现文本和乱码, 一定要努力保证在该环节没有问题. 坐标定位 SVG采用常见的Canvas坐标定位, 从高到低从左到右, 单位距离为1px 定义一个100*100的矩形 1234567&lt;svg version=\"2\" baseProfile=\"full\" xmlns=\"http://www.w3.org/2000/svg\"&gt; &lt;rect x=\"0\" y=\"0\" width=\"100\" height=\"100\" /&gt;&lt;/svg&gt; 就会出现一个大黑块 像素大小 通常 1px 便是用户屏幕的1个像素, 和CSS一样, SVG也能定义相对大小和绝对大小. 在SVG根元素中, 可以如下定义 1&lt;svg width=\"50\" height=\"50\" viewBox=\"0 0 100 100\" &gt; 定义画布尺寸为50*50px, 显示的坐标范围100*100px, 实现了缩小一半的效果. 和Qt类似, 用户设备和单位像素的映射关系叫用户坐标系统, 缩放、旋转、倾斜、翻转等功能均可实现. 基本形状 下面是一些常见的基本形状, 我们可以直接运用他们或者用他们构建出更复杂的形状. 分别是 矩形, 圆角矩形, 圆, 椭圆, 直线, 折线, 多边形, 曲线 矩形 圆角矩形 12&lt;rect x=\"10\" y=\"10\" width=\"30\" height=\"30\" stroke=\"black\" fill=\"transparent\" stroke-width=\"5\"/&gt;&lt;rect x=\"60\" y=\"10\" rx=\"10\" ry=\"10\" width=\"30\" height=\"30\" stroke=\"black\" fill=\"transparent\" stroke-width=\"5\"/&gt; 参数: 左上角的x,y坐标 长度 宽度 rx ry圆角半径 圆 椭圆 12&lt;circle cx=\"25\" cy=\"75\" r=\"20\" stroke=\"red\" fill=\"transparent\" stroke-width=\"5\"/&gt;&lt;ellipse cx=\"75\" cy=\"75\" rx=\"20\" ry=\"5\" stroke=\"red\" fill=\"transparent\" stroke-width=\"5\"/&gt; 参数: cx cy中心坐标 r半径 rx x方向半轴 ry y方向半轴 - 椭圆的参数还挺难受的, 不过中心点也还行 线 折线 多边形 12345&lt;line x1=\"10\" x2=\"50\" y1=\"110\" y2=\"150\" stroke=\"orange\" fill=\"transparent\" stroke-width=\"5\"/&gt;&lt;polyline points=\"60 110 65 120 70 115 75 130 80 125 85 140 90 135 95 150 100 145\" stroke=\"orange\" fill=\"transparent\" stroke-width=\"5\"/&gt;&lt;polygon points=\"50 160 55 180 70 180 60 190 65 205 50 195 35 205 40 190 30 180 45 180\" stroke=\"green\" fill=\"transparent\" stroke-width=\"5\"/&gt; 参数: x y起点终点坐标 points点集 xi yi - 多边形和折线不同的是, 多边形最终回到原点, 折线落在最后一点. - 点集中每个数字用空白符、逗号、终止命令或者换行符分隔开, 每个点必须包含2个数字 路径 1&lt;path d=\"M20,230 Q40,205 50,230 T90,230\" fill=\"none\" stroke=\"blue\" stroke-width=\"5\"/&gt; 参数: d一个点集数列 路径几乎是万能的, 也是最常见的, 可以用来绘制一切线条. 路径作图详解 path元素的形状是通过属性d定义的，属性d的值是一个“命令+参数”的序列. 缩写 意义 备注 当前点坐标(\\(x_0\\),\\(y_0\\)) M x y 画笔移动到点(\\(x,y\\)) 移动不产生笔迹 L x y 画(\\(x_0\\),\\(y_0\\))到点(\\(x\\),\\(y\\))的线段 H x 画(\\(x_0\\),\\(y_0\\))到点(x,\\(y_0\\))的水平线 V y 画(\\(x_0\\),\\(y_0\\))到点(\\(x_0\\),\\(y\\))的垂直线 Z/z 画(\\(x_0\\),\\(y_0\\))到路径起点 无参数,不区分大小写 C \\(x_1\\) \\(y_1\\), \\(x_2\\) \\(y_2\\), \\(x\\) \\(y\\) 三次贝塞尔曲线 对应点 $P_0 $ \\(x_0,y_0\\) / $P_1 $ \\(x_1,y_1\\) / \\(P_2\\) \\(x_2,y_2\\) / \\(P_3\\) \\(x,y\\) S \\(x_2\\) \\(y_2\\), \\(x\\) \\(y\\) 简化的多个三次贝塞尔曲线 每个曲线的\\(P_1\\)控制点和前一曲线\\(P_2\\)对称, 可省(蓝点) Q \\(x_1\\) \\(y_1\\), \\(x\\) \\(y\\) 二次贝塞尔曲线 类似三次... T \\(x\\) \\(y\\) 简化的多个二次贝塞尔曲线 A \\(rx\\ ry\\ x-axis-rotation\\) \\(large-arc-flag\\ sweep-flag\\ x\\ y\\) 弧形命令 \\(rx\\) x方向半轴\\(ry\\) y方向半轴 \\(x-axis-rotation\\) 关于x轴旋转角度\\(large-arc-flag\\) 0劣弧 1优弧\\(sweep-flag\\)起点到终点 0逆时针弧 1顺时针弧\\(x,y\\)终点 m, l, v, h, z, c, s, q, t, a \\(dx_i \\ dy_i\\) 小写是大写的简化, 只需要坐标变化量即可 便捷但可读性不强 每次使用path前, 都需要使用M移动到具体位置 贝塞尔曲线广泛应用于计算机平滑曲线制作, 包括 .ttf 字体设计. 三次贝塞尔曲线参数形式: \\[ \\mathbf{B}(t)=\\mathbf{P}_{0}(1-t)^{3}+3 \\mathbf{P}_{1} t(1-t)^{2}+3 \\mathbf{P}_{2} t^{2}(1-t)+\\mathbf{P}_{3} t^{3}, t \\in[0,1] \\] 贝塞尔曲线一般参数形式: \\[ \\mathbf{B}(t)=\\sum_{i=0}^{n}\\left(\\begin{array}{l}n \\\\ i\\end{array}\\right) \\mathbf{P}_{i}(1-t)^{n-i} t^{i}, t \\in[0,1] \\] 以知两点和椭圆长短半轴和旋转角度通常可以画四条弧, A中的参数就是为了确定是哪一条弧. z只能在一个path命令中使用,即一笔画 一些例子 我用上面的所有path语法, 乱画一通, 如下 1234567891011121314&lt;?xml version=\"1.1\" standalone=\"no\"?&gt;&lt;svg width=\"200px\" height=\"200px\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"&gt; &lt;path d=\"M10 10 L 20 100\" stroke=\"black\" fill=\"transparent\"/&gt; &lt;path d=\"M20 100 V 5 \" stroke=\"green\" fill=\"transparent\"/&gt; &lt;path d=\"M20 5 H 60 \" stroke=\"orange\" fill=\"transparent\"/&gt; &lt;path d=\"M60 5 C 30 20, 30 60, 65 100 \" stroke=\"purple\" fill=\"transparent\"/&gt; &lt;path d=\"M65 100 S 100 140, 20 160 \" stroke=\"red\" fill=\"transparent\"/&gt; &lt;path d=\"M20 160 Q 70 180, 80 160 \" stroke=\"blue\" fill=\"transparent\"/&gt; &lt;path d=\"M80 160 T 130 170 \" stroke=\"yellow\" fill=\"transparent\"/&gt; &lt;path d=\"M130 170 A 30 60 0 0 0 170 50 \" stroke=\"brown\" fill=\"transparent\"/&gt; &lt;path d=\"M10 10 L170 50 \" stroke=\"pink\" fill=\"transparent\"/&gt; &lt;/svg&gt; 结果如下: Fill 和 Stroke 属性 fill和stroke分别对应填充颜色和线条颜色. 此外还有很多他们的延申属性. 着色 画一个红边蓝底的矩形框 **-opacity代表透明度设置, 颜色命名方案支持CSS颜色命名方案, 即颜色名（如red）、rgb值（如rgb(255,0,0)）、十六进制值、rgba值 12&lt;rect x=\"10\" y=\"10\" height=\"50\" width=\"50\" stroke=\"rgb(255,0,0)\" fill=\"#0000FF\" fill-opacity=\"0.3\" stroke-opacity=\"0.8\" /&gt; 描边 stroke-width 线宽 stroke-linecap 描边方式三种: 无描边, 方形描边, 圆角描边 123&lt;line x1=\"20\" x2=\"70\" y1=\"80\" y2=\"80\" stroke=\"black\" stroke-width=\"6\" stroke-linecap=\"butt\"/&gt;&lt;line x1=\"20\" x2=\"70\" y1=\"100\" y2=\"100\" stroke=\"rgb(255,255,255)\" stroke-width=\"8\" stroke-linecap=\"square\"/&gt;&lt;line x1=\"20\" x2=\"70\" y1=\"120\" y2=\"120\" stroke=\"#FFFFFF\" stroke-width=\"10\" stroke-linecap=\"round\"/&gt; 还有, stroke-linejoin属性控制折线折角风格 |值|效果| |:---:|:---:| |miter|尖角无修饰| |round|圆角, 圆润| |bevel|斜角,切去尖角| stroke-dasharray用于画虚线, 接 \\(n_1,n_2...n_i\\), 分别代表 \\(n_i\\)px 个填充或空白, 循环着色. 1234&lt;path d=\"M 10 75 Q 50 10 100 75 T 190 75\" stroke=\"black\" stroke-linecap=\"round\" stroke-dasharray=\"5,10,5\" fill=\"none\"/&gt;&lt;path d=\"M 10 75 L 190 75\" stroke=\"red\" stroke-linecap=\"round\" stroke-width=\"1\" stroke-dasharray=\"5,5\" fill=\"none\"/&gt; 还有一些其他常见的修饰属性, 查阅参考文档. 使用CSS 可以像在Html中一样使用CSS, 有些地方需要更换一下属性名字. 但是根据SVG的规范, properties 可以用CSS设置, attributes则不可以. 直接在元素行间设置属性 1&lt;rect x=\"10\" height=\"180\" y=\"10\" width=\"180\" style=\"stroke: red; stroke-width: 5; fill: blue;\"/&gt; 设置样式段落 利用&lt;style&gt;设置一段样式段落, 在html里这样的&lt;style&gt;一般放在&lt;head&gt;里，在svg里&lt;style&gt;则放在&lt;defs&gt;标签里 12345678910&lt;defs&gt; &lt;style type=\"text/css\"&gt;&lt;![CDATA[ #MyRect &#123; stroke: green; stroke-width: 7; fill: yellow; &#125; ]]&gt;&lt;/style&gt;&lt;/defs&gt;&lt;rect x=\"10\" height=\"180\" y=\"10\" width=\"180\" id=\"MyRect\"/&gt; 定义外部样式表 要求符合normal XML-stylesheet syntax的规则. 可以在SVG中运用. 最好学一点CSS的知识, 获得更好的表现能力. 此外一些CSS可能在SVG中无法正常工作. 渐变 渐变是很多很酷的显示效果的基础功能, 一般有线性渐变和径向渐变. 我们一般将渐变定义在&lt;defs&gt;中, 并用一个id属性指代它们, 方便复用. 线性渐变 径向渐变 较为复杂且费力, 这会是一个很有帮助的参考, 必要时学习并使用. https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Gradients 图案 图案可以之前学过的任意图形来实现对画布的填充. 一个天蓝色矩形, 一个边长是前者一半大小的红色矩形, 一个半透明的圆, 组成了最基本的图案单元. 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=\"1.0\" standalone=\"no\"?&gt;&lt;svg width=\"750\" height=\"200\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"&gt; &lt;defs&gt; &lt;linearGradient id=\"Gradient1\"&gt; &lt;stop offset=\"5%\" stop-color=\"white\"/&gt; &lt;stop offset=\"95%\" stop-color=\"blue\"/&gt; &lt;/linearGradient&gt; &lt;linearGradient id=\"Gradient2\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\"&gt; &lt;stop offset=\"5%\" stop-color=\"red\"/&gt; &lt;stop offset=\"95%\" stop-color=\"orange\"/&gt; &lt;/linearGradient&gt; &lt;pattern id=\"Pattern\" x=\"0\" y=\"0\" width=\".25\" height=\".25\"&gt; &lt;rect x=\"0\" y=\"0\" width=\"50\" height=\"50\" fill=\"skyblue\"/&gt; &lt;rect x=\"0\" y=\"0\" width=\"25\" height=\"25\" fill=\"url(#Gradient2)\"/&gt; &lt;circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"url(#Gradient1)\" fill-opacity=\"0.5\"/&gt; &lt;/pattern&gt; &lt;pattern id=\"Pattern1\" width=\".25\" height=\".25\" patternContentUnits=\"objectBoundingBox\"&gt; &lt;rect x=\"0\" y=\"0\" width=\".25\" height=\".25\" fill=\"skyblue\"/&gt; &lt;rect x=\"0\" y=\"0\" width=\".125\" height=\".125\" fill=\"url(#Gradient2)\"/&gt; &lt;circle cx=\".125\" cy=\".125\" r=\".1\" fill=\"url(#Gradient1)\" fill-opacity=\"0.5\"/&gt; &lt;/pattern&gt; &lt;pattern id=\"Pattern2\" x=\"10\" y=\"10\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\"&gt; &lt;rect x=\"0\" y=\"0\" width=\"50\" height=\"50\" fill=\"skyblue\"/&gt; &lt;rect x=\"0\" y=\"0\" width=\"25\" height=\"25\" fill=\"url(#Gradient2)\"/&gt; &lt;circle cx=\"25\" cy=\"25\" r=\"20\" fill=\"url(#Gradient1)\" fill-opacity=\"0.5\"/&gt; &lt;/pattern&gt; &lt;/defs&gt; &lt;rect fill=\"url(#Pattern)\" stroke=\"black\" x=\"0\" y=\"0\" width=\"250\" height=\"200\"/&gt; &lt;rect fill=\"url(#Pattern1)\" stroke=\"black\" x=\"250\" y=\"0\" width=\"250\" height=\"200\"/&gt; &lt;rect fill=\"url(#Pattern2)\" stroke=\"black\" x=\"500\" y=\"0\" width=\"250\" height=\"200\"/&gt;&lt;/svg&gt; Pattern 注意到width=&quot;.25&quot; height=&quot;.25&quot;, 4*4填充, 不会拉伸, 不够的地方是空白. Pattern1 使用patternContentUnits, 默认值为userSpaceOnUse, 当设置其值为objectBoundingBox, 将不再使用Pattern本身的坐标而是使用画布的坐标系统, 需要计算宽和高的比例 0~1, 可以产生拉伸效果. Pattern2 属性patternUnits, 默认值为objectBoundingBox, 当设置其值为userSpaceOnUse, 可以加入x=&quot;10&quot; y=&quot;10&quot;设置Pattern的偏移量, 也可以写成x=&quot;1/30&quot; y=&quot;0.05&quot;. 10/300=1/30 10/200=0.05. 可以产生平移效果. 文字 SVG能显示一切字符, 拥有丰富的格式修饰 &lt;text&gt;元素用来放文字, 可以指定位置, 字号, 对齐, 填充, 描边 text-anchor有start、middle、end或inherit几种值可选. 12345678910&lt;svg version=\"1.1\" baseProfile=\"full\" width=\"600\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"&gt; &lt;rect width=\"100%\" height=\"100%\" fill=\"red\" /&gt; &lt;text id=\"example\" x=\"350\" y=\"50\" font-size=\"30\" text-anchor=\"middle\" stroke=\"green\" fill=\"yellow\"&gt;₰汉字⅝English🌊π🦾 &lt;tspan font-weight=\"bold\" fill=\"red\"&gt; bold and red&lt;/tspan&gt; &lt;/text&gt; &lt;path id=\"my_path\" d=\"M 20,20 C 40,40 80,40 100,20\" /&gt; &lt;text&gt; &lt;textPath xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#my_path\"&gt;This text follows a curve.&lt;/textPath&gt; &lt;/text&gt;&lt;/svg&gt; 常见的属性包括font-family、font-style、font-weight、font-variant、font-stretch、font-size、font-size-adjust、kerning、letter-spacing、word-spacing和text-decoration可以被设置为一个SVG属性或者成为一个CSS声明 一些特别的元素 tspan 该元素用来标记大块文本的子部分，它必须是一个text元素或别的tspan元素的子元素。 它的一些属性可以重新定义文字位置, 旋转文字, 定义文本长度 tref 引用已经定义的文本，高效地把它复制到当前位置(貌似没用) textPath 利用它的xlink:href属性取得一个任意路径，把字符对齐到路径 基础变形 包括平移, 旋转, 斜切, 缩放等基本的图形变换. 平移 translate(dx,dy) 1&lt;rect x=\"0\" y=\"0\" width=\"10\" height=\"10\" transform=\"translate(30,40)\" /&gt; 旋转 rotate(α)按角度计算 1&lt;rect x=\"20\" y=\"20\" width=\"20\" height=\"20\" transform=\"rotate(45)\" /&gt; 斜切 skewX(α), skewY(θ)角度确定元素斜切到哪里 缩放 scale(x%, y%)规定缩放的比例, 通常用小数, y轴的比例可以省略 剪裁和遮罩 https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial/Clipping_and_masking 插入图片 为了表达对小袁的思念, 在她面前做了这个图, 12345678910&lt;!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"&gt;&lt;svg version=\"1.1\" standalone=\"no\" width=\"900\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink= \"http://www.w3.org/1999/xlink\"&gt; &lt;rect width=\"100%\" height=\"100%\" fill=\"purple\" /&gt; &lt;text x=\"450\" y=\"100\" font-size=\"40\" text-anchor=\"middle\" fill=\"white\"&gt;我爱小袁&lt;/text&gt; &lt;image xlink:href=\"https://cdn.jsdelivr.net/gh/18wang/media/xy.jpg\" x=\"250\" y=\"200\" height=\"400\" /&gt;&lt;/svg&gt; 一个xlink:href属性引用了一个将呈现在SVG对象中的.jpg图像, 注意要包含xmlns:xlink= &quot;http://www.w3.org/1999/xlink才行, 否则会出错. 还有一些注意点: * 如果你没有设置x属性或y属性，它们自动被设置为0。 * 如果你没有设置height属性或width属性，它们自动被设置为0。 * 如果width属性或height等于0，将不会呈现这个图像。 * 图片可以是来自文件或者网页(只要有网全世界都可以看到该图片)","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-22T03:06:34.642Z","updated":"2020-03-19T13:40:05.717Z","comments":true,"path":"2020/03/22/hello-world/","link":"","permalink":"http://yoursite.com/2020/03/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new \"My New Post\" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}